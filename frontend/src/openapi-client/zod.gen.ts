// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zPostAuthCheckEmailData = z.object({
    email: z.string().email()
});

/**
 * Email exists
 */
export const zPostAuthCheckEmailResponse = z.object({
    success: z.boolean()
});

export const zPostAuthSignUpData = z.object({
    email: z.string().email(),
    password: z.string().min(8).max(100)
});

/**
 * User signed up
 */
export const zPostAuthSignUpResponse = z.object({
    success: z.boolean()
});

export const zPostAuthSignUpByTokenData = z.object({
    email: z.string().email(),
    password: z.string().min(8).max(100)
});

export const zPostAuthSignUpByTokenParameterToken = z.string();

/**
 * User signed up
 */
export const zPostAuthSignUpByTokenResponse = z.object({
    success: z.boolean()
});

export const zPostAuthSendVerificationEmailData = z.object({
    tokenId: z.string().optional(),
    userId: z.string().optional()
});

/**
 * Verification email sent
 */
export const zPostAuthSendVerificationEmailResponse = z.object({
    success: z.boolean()
});

export const zPostAuthVerifyEmailByTokenParameterToken = z.string();

/**
 * Verified & session given
 */
export const zPostAuthVerifyEmailByTokenResponse = z.object({
    success: z.boolean()
});

export const zPostAuthRequestPasswordData = z.object({
    email: z.string().email()
});

/**
 * Password reset email sent
 */
export const zPostAuthRequestPasswordResponse = z.object({
    success: z.boolean()
});

export const zPostAuthCreatePasswordByTokenData = z.object({
    password: z.string().min(8).max(100)
});

export const zPostAuthCreatePasswordByTokenParameterToken = z.string();

/**
 * Password created
 */
export const zPostAuthCreatePasswordByTokenResponse = z.object({
    success: z.boolean()
});

export const zPostAuthSignInData = z.object({
    email: z.string().email(),
    password: z.string().min(8).max(100)
});

/**
 * User signed in
 */
export const zPostAuthSignInResponse = z.object({
    success: z.boolean(),
    data: z.object({
        emailVerified: z.boolean()
    })
});

export const zPostAuthCheckTokenByIdParameterId = z.string();

export const zPostAuthCheckTokenByIdParameterType = z.enum([
    'email_verification',
    'password_reset',
    'invitation'
]);

/**
 * Token is valid
 */
export const zPostAuthCheckTokenByIdResponse = z.object({
    success: z.boolean(),
    data: z.object({
        email: z.string().email(),
        userId: z.string().optional(),
        organizationName: z.string().optional(),
        organizationSlug: z.string().optional(),
        organizationId: z.string().optional()
    })
});

export const zPostAuthAcceptInviteByTokenParameterToken = z.string();

/**
 * Invitation was accepted
 */
export const zPostAuthAcceptInviteByTokenResponse = z.object({
    success: z.boolean()
});

export const zGetAuthImpersonationStartParameterTargetUserId = z.string();

/**
 * Impersonating
 */
export const zGetAuthImpersonationStartResponse = z.object({
    success: z.boolean()
});

/**
 * Stopped impersonating
 */
export const zGetAuthImpersonationStopResponse = z.object({
    success: z.boolean()
});

/**
 * User signed out
 */
export const zGetAuthSignOutResponse = z.object({
    success: z.boolean()
});

export const zGetAuthGithubParameterType = z.enum([
    'auth',
    'connect',
    'invite'
]);

export const zGetAuthGithubParameterRedirect = z.string();

export const zGetAuthGithubParameterConnect = z.string();

export const zGetAuthGithubParameterToken = z.string();

export const zGetAuthGoogleParameterType = z.enum([
    'auth',
    'connect',
    'invite'
]);

export const zGetAuthGoogleParameterRedirect = z.string();

export const zGetAuthGoogleParameterConnect = z.string();

export const zGetAuthGoogleParameterToken = z.string();

export const zGetAuthMicrosoftParameterType = z.enum([
    'auth',
    'connect',
    'invite'
]);

export const zGetAuthMicrosoftParameterRedirect = z.string();

export const zGetAuthMicrosoftParameterConnect = z.string();

export const zGetAuthMicrosoftParameterToken = z.string();

export const zGetAuthGithubCallbackParameterCode = z.string();

export const zGetAuthGithubCallbackParameterState = z.string();

export const zGetAuthGithubCallbackParameterError = z.string();

export const zGetAuthGithubCallbackParameterErrorDescription = z.string();

export const zGetAuthGithubCallbackParameterErrorUri = z.string();

export const zGetAuthGoogleCallbackParameterCode = z.string();

export const zGetAuthGoogleCallbackParameterState = z.string();

export const zGetAuthMicrosoftCallbackParameterCode = z.string();

export const zGetAuthMicrosoftCallbackParameterState = z.string();

/**
 * Challenge created
 */
export const zGetAuthPasskeyChallengeResponse = z.object({
    challengeBase64: z.string()
});

export const zPostAuthPasskeyVerificationData = z.object({
    clientDataJSON: z.string(),
    authenticatorData: z.string(),
    signature: z.string(),
    userEmail: z.string()
});

/**
 * Passkey verified
 */
export const zPostAuthPasskeyVerificationResponse = z.object({
    success: z.boolean()
});

/**
 * User deleted
 */
export const zDeleteMeResponse = z.object({
    success: z.boolean()
});

/**
 * User
 */
export const zGetMeResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        entityType: z.enum([
            'user'
        ]),
        name: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        slug: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        bannerUrl: z.union([
            z.string(),
            z.null()
        ]),
        email: z.string().email(),
        firstName: z.union([
            z.string(),
            z.null()
        ]),
        lastName: z.union([
            z.string(),
            z.null()
        ]),
        language: z.enum([
            'en',
            'nl'
        ]),
        newsletter: z.boolean(),
        role: z.enum([
            'user',
            'admin'
        ]),
        createdAt: z.string(),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSeenAt: z.union([
            z.string(),
            z.null()
        ]),
        lastStartedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSignInAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ])
    })
});

export const zPutMeData = z.object({
    bannerUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    firstName: z.union([
        z.string().min(2).max(100),
        z.null()
    ]).optional(),
    lastName: z.union([
        z.string().min(2).max(100),
        z.null()
    ]).optional(),
    language: z.enum([
        'en',
        'nl'
    ]).optional(),
    newsletter: z.boolean().optional(),
    thumbnailUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    slug: z.string().min(2).max(100).optional()
});

/**
 * User
 */
export const zPutMeResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        entityType: z.enum([
            'user'
        ]),
        name: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        slug: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        bannerUrl: z.union([
            z.string(),
            z.null()
        ]),
        email: z.string().email(),
        firstName: z.union([
            z.string(),
            z.null()
        ]),
        lastName: z.union([
            z.string(),
            z.null()
        ]),
        language: z.enum([
            'en',
            'nl'
        ]),
        newsletter: z.boolean(),
        role: z.enum([
            'user',
            'admin'
        ]),
        createdAt: z.string(),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSeenAt: z.union([
            z.string(),
            z.null()
        ]),
        lastStartedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSignInAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ])
    })
});

/**
 * User sign-up info
 */
export const zGetMeAuthResponse = z.object({
    success: z.boolean(),
    data: z.object({
        oauth: z.array(z.enum([
            'github'
        ])),
        passkey: z.boolean(),
        sessions: z.array(z.object({
            id: z.string(),
            type: z.enum([
                'regular',
                'impersonation'
            ]),
            userId: z.string(),
            deviceName: z.union([
                z.string(),
                z.null()
            ]),
            deviceType: z.enum([
                'desktop',
                'mobile'
            ]),
            deviceOs: z.union([
                z.string(),
                z.null()
            ]),
            browser: z.union([
                z.string(),
                z.null()
            ]),
            authStrategy: z.enum([
                'github',
                'google',
                'microsoft',
                'password',
                'passkey'
            ]),
            createdAt: z.string(),
            expiresAt: z.string(),
            isCurrent: z.boolean()
        }))
    })
});

/**
 * Menu of user
 */
export const zGetMeMenuResponse = z.object({
    success: z.boolean(),
    data: z.object({
        organization: z.array(z.object({
            id: z.string(),
            entityType: z.enum([
                'organization'
            ]),
            slug: z.string(),
            name: z.string(),
            thumbnailUrl: z.union([
                z.string(),
                z.null()
            ]).optional(),
            createdAt: z.string(),
            modifiedAt: z.union([
                z.string(),
                z.null()
            ]),
            membership: z.object({
                id: z.string(),
                contextType: z.enum([
                    'organization'
                ]),
                userId: z.string(),
                role: z.enum([
                    'member',
                    'admin'
                ]),
                archived: z.boolean(),
                muted: z.boolean(),
                order: z.number().gte(-140737488355328).lte(140737488355327),
                organizationId: z.string()
            }),
            organizationId: z.string().optional(),
            submenu: z.array(z.object({
                id: z.string(),
                entityType: z.enum([
                    'organization'
                ]),
                slug: z.string(),
                name: z.string(),
                thumbnailUrl: z.union([
                    z.string(),
                    z.null()
                ]).optional(),
                createdAt: z.string(),
                modifiedAt: z.union([
                    z.string(),
                    z.null()
                ]),
                membership: z.object({
                    id: z.string(),
                    contextType: z.enum([
                        'organization'
                    ]),
                    userId: z.string(),
                    role: z.enum([
                        'member',
                        'admin'
                    ]),
                    archived: z.boolean(),
                    muted: z.boolean(),
                    order: z.number().gte(-140737488355328).lte(140737488355327),
                    organizationId: z.string()
                }),
                organizationId: z.string().optional()
            })).optional()
        }))
    })
});

export const zDeleteMeSessionsData = z.object({
    ids: z.array(z.string()).min(1)
});

/**
 * Success
 */
export const zDeleteMeSessionsResponse = z.object({
    success: z.boolean(),
    errors: z.array(z.object({
        message: z.string(),
        type: z.string(),
        status: z.number(),
        severity: z.enum([
            'debug',
            'log',
            'info',
            'warn',
            'error'
        ]),
        entityType: z.enum([
            'user',
            'organization',
            'attachment'
        ]).optional(),
        logId: z.string().optional(),
        path: z.string().optional(),
        method: z.string().optional(),
        timestamp: z.string().optional(),
        usr: z.string().optional(),
        org: z.string().optional()
    }))
});

export const zDeleteMeLeaveParameterIdOrSlug = z.string();

export const zDeleteMeLeaveParameterEntityType = z.enum([
    'organization'
]);

/**
 * Membership removed
 */
export const zDeleteMeLeaveResponse = z.object({
    success: z.boolean()
});

/**
 * Passkey removed
 */
export const zDeleteMePasskeyResponse = z.object({
    success: z.boolean()
});

export const zPostMePasskeyData = z.object({
    userEmail: z.string(),
    attestationObject: z.string(),
    clientDataJSON: z.string()
});

/**
 * Passkey created
 */
export const zPostMePasskeyResponse = z.object({
    success: z.boolean()
});

export const zGetMeUploadTokenParameterPublic = z.union([
    z.string(),
    z.boolean()
]);

export const zGetMeUploadTokenParameterOrganizationId = z.string();

export const zGetMeUploadTokenParameterTemplateId = z.enum([
    'avatar',
    'cover',
    'attachment'
]);

/**
 * Upload token with a scope for a user or organization
 */
export const zGetMeUploadTokenResponse = z.object({
    success: z.boolean(),
    data: z.object({
        public: z.boolean(),
        sub: z.string(),
        s3: z.boolean(),
        signature: z.string(),
        params: z.object({
            auth: z.object({
                key: z.string(),
                expires: z.string().optional()
            })
        })
    })
});

export const zGetMeUnsubscribeParameterToken = z.string();

export const zDeleteUsersData = z.object({
    ids: z.array(z.string()).min(1).max(50)
});

/**
 * Success
 */
export const zDeleteUsersResponse = z.object({
    success: z.boolean(),
    errors: z.array(z.object({
        message: z.string(),
        type: z.string(),
        status: z.number(),
        severity: z.enum([
            'debug',
            'log',
            'info',
            'warn',
            'error'
        ]),
        entityType: z.enum([
            'user',
            'organization',
            'attachment'
        ]).optional(),
        logId: z.string().optional(),
        path: z.string().optional(),
        method: z.string().optional(),
        timestamp: z.string().optional(),
        usr: z.string().optional(),
        org: z.string().optional()
    }))
});

export const zGetUsersParameterQ = z.string();

export const zGetUsersParameterSort = z.enum([
    'id',
    'name',
    'email',
    'role',
    'createdAt',
    'lastSeenAt',
    'membershipCount'
]);

export const zGetUsersParameterOrder = z.enum([
    'asc',
    'desc'
]);

export const zGetUsersParameterOffset = z.string().default('0');

export const zGetUsersParameterLimit = z.string().default('40');

export const zGetUsersParameterRole = z.enum([
    'user',
    'admin'
]);

/**
 * Users
 */
export const zGetUsersResponse = z.object({
    success: z.boolean(),
    data: z.object({
        items: z.array(z.object({
            id: z.string(),
            entityType: z.enum([
                'user'
            ]),
            name: z.string(),
            description: z.union([
                z.string(),
                z.null()
            ]),
            slug: z.string(),
            thumbnailUrl: z.union([
                z.string(),
                z.null()
            ]),
            bannerUrl: z.union([
                z.string(),
                z.null()
            ]),
            email: z.string().email(),
            firstName: z.union([
                z.string(),
                z.null()
            ]),
            lastName: z.union([
                z.string(),
                z.null()
            ]),
            language: z.enum([
                'en',
                'nl'
            ]),
            newsletter: z.boolean(),
            role: z.enum([
                'user',
                'admin'
            ]),
            createdAt: z.string(),
            modifiedAt: z.union([
                z.string(),
                z.null()
            ]),
            lastSeenAt: z.union([
                z.string(),
                z.null()
            ]),
            lastStartedAt: z.union([
                z.string(),
                z.null()
            ]),
            lastSignInAt: z.union([
                z.string(),
                z.null()
            ]),
            modifiedBy: z.union([
                z.string(),
                z.null()
            ])
        })),
        total: z.number()
    })
});

export const zGetUsersByIdOrSlugParameterIdOrSlug = z.string();

/**
 * User
 */
export const zGetUsersByIdOrSlugResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        entityType: z.enum([
            'user'
        ]),
        name: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        slug: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        bannerUrl: z.union([
            z.string(),
            z.null()
        ]),
        email: z.string().email(),
        firstName: z.union([
            z.string(),
            z.null()
        ]),
        lastName: z.union([
            z.string(),
            z.null()
        ]),
        language: z.enum([
            'en',
            'nl'
        ]),
        newsletter: z.boolean(),
        role: z.enum([
            'user',
            'admin'
        ]),
        createdAt: z.string(),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSeenAt: z.union([
            z.string(),
            z.null()
        ]),
        lastStartedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSignInAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ])
    })
});

export const zPutUsersByIdOrSlugData = z.object({
    bannerUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    firstName: z.union([
        z.string().min(2).max(100),
        z.null()
    ]).optional(),
    lastName: z.union([
        z.string().min(2).max(100),
        z.null()
    ]).optional(),
    language: z.enum([
        'en',
        'nl'
    ]).optional(),
    newsletter: z.boolean().optional(),
    thumbnailUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    slug: z.string().min(2).max(100).optional()
});

export const zPutUsersByIdOrSlugParameterIdOrSlug = z.string();

/**
 * User
 */
export const zPutUsersByIdOrSlugResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        entityType: z.enum([
            'user'
        ]),
        name: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        slug: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        bannerUrl: z.union([
            z.string(),
            z.null()
        ]),
        email: z.string().email(),
        firstName: z.union([
            z.string(),
            z.null()
        ]),
        lastName: z.union([
            z.string(),
            z.null()
        ]),
        language: z.enum([
            'en',
            'nl'
        ]),
        newsletter: z.boolean(),
        role: z.enum([
            'user',
            'admin'
        ]),
        createdAt: z.string(),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSeenAt: z.union([
            z.string(),
            z.null()
        ]),
        lastStartedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSignInAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ])
    })
});

export const zDeleteOrganizationsData = z.object({
    ids: z.array(z.string()).min(1).max(50)
});

/**
 * Success
 */
export const zDeleteOrganizationsResponse = z.object({
    success: z.boolean(),
    errors: z.array(z.object({
        message: z.string(),
        type: z.string(),
        status: z.number(),
        severity: z.enum([
            'debug',
            'log',
            'info',
            'warn',
            'error'
        ]),
        entityType: z.enum([
            'user',
            'organization',
            'attachment'
        ]).optional(),
        logId: z.string().optional(),
        path: z.string().optional(),
        method: z.string().optional(),
        timestamp: z.string().optional(),
        usr: z.string().optional(),
        org: z.string().optional()
    }))
});

export const zGetOrganizationsParameterQ = z.string();

export const zGetOrganizationsParameterSort = z.enum([
    'id',
    'name',
    'userRole',
    'createdAt'
]);

export const zGetOrganizationsParameterOrder = z.enum([
    'asc',
    'desc'
]);

export const zGetOrganizationsParameterOffset = z.string().default('0');

export const zGetOrganizationsParameterLimit = z.string().default('40');

/**
 * Organizations
 */
export const zGetOrganizationsResponse = z.object({
    success: z.boolean(),
    data: z.object({
        items: z.array(z.object({
            id: z.string(),
            entityType: z.enum([
                'organization'
            ]),
            name: z.string(),
            description: z.union([
                z.string(),
                z.null()
            ]),
            slug: z.string(),
            thumbnailUrl: z.union([
                z.string(),
                z.null()
            ]),
            bannerUrl: z.union([
                z.string(),
                z.null()
            ]),
            shortName: z.union([
                z.string(),
                z.null()
            ]),
            country: z.union([
                z.string(),
                z.null()
            ]),
            timezone: z.union([
                z.string(),
                z.null()
            ]),
            defaultLanguage: z.enum([
                'en',
                'nl'
            ]),
            languages: z.array(z.enum([
                'en',
                'nl'
            ])).min(1),
            restrictions: z.union([
                z.string(),
                z.number(),
                z.boolean(),
                z.null(),
                z.object({}),
                z.array(z.unknown())
            ]),
            notificationEmail: z.union([
                z.string(),
                z.null()
            ]),
            emailDomains: z.array(z.string()),
            color: z.union([
                z.string(),
                z.null()
            ]),
            logoUrl: z.union([
                z.string(),
                z.null()
            ]),
            websiteUrl: z.union([
                z.string(),
                z.null()
            ]),
            welcomeText: z.union([
                z.string(),
                z.null()
            ]),
            authStrategies: z.array(z.string()),
            chatSupport: z.boolean(),
            createdAt: z.string(),
            createdBy: z.union([
                z.string(),
                z.null()
            ]),
            modifiedAt: z.union([
                z.string(),
                z.null()
            ]),
            modifiedBy: z.union([
                z.string(),
                z.null()
            ]),
            membership: z.union([
                z.object({
                    id: z.string(),
                    contextType: z.enum([
                        'organization'
                    ]),
                    userId: z.string(),
                    role: z.enum([
                        'member',
                        'admin'
                    ]),
                    archived: z.boolean(),
                    muted: z.boolean(),
                    order: z.number().gte(-140737488355328).lte(140737488355327),
                    organizationId: z.string()
                }),
                z.null()
            ]),
            counts: z.object({
                membership: z.object({
                    admin: z.number(),
                    member: z.number(),
                    pending: z.number(),
                    total: z.number()
                }),
                related: z.object({
                    0: z.number()
                })
            })
        })),
        total: z.number()
    })
});

export const zPostOrganizationsData = z.object({
    name: z.string().min(2).max(100),
    slug: z.string().min(2).max(100)
});

/**
 * Organization was created
 */
export const zPostOrganizationsResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        entityType: z.enum([
            'organization'
        ]),
        name: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        slug: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        bannerUrl: z.union([
            z.string(),
            z.null()
        ]),
        shortName: z.union([
            z.string(),
            z.null()
        ]),
        country: z.union([
            z.string(),
            z.null()
        ]),
        timezone: z.union([
            z.string(),
            z.null()
        ]),
        defaultLanguage: z.enum([
            'en',
            'nl'
        ]),
        languages: z.array(z.enum([
            'en',
            'nl'
        ])).min(1),
        restrictions: z.union([
            z.string(),
            z.number(),
            z.boolean(),
            z.null(),
            z.object({}),
            z.array(z.unknown())
        ]),
        notificationEmail: z.union([
            z.string(),
            z.null()
        ]),
        emailDomains: z.array(z.string()),
        color: z.union([
            z.string(),
            z.null()
        ]),
        logoUrl: z.union([
            z.string(),
            z.null()
        ]),
        websiteUrl: z.union([
            z.string(),
            z.null()
        ]),
        welcomeText: z.union([
            z.string(),
            z.null()
        ]),
        authStrategies: z.array(z.string()),
        chatSupport: z.boolean(),
        createdAt: z.string(),
        createdBy: z.union([
            z.string(),
            z.null()
        ]),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ]),
        membership: z.object({
            id: z.string(),
            contextType: z.enum([
                'organization'
            ]),
            userId: z.string(),
            role: z.enum([
                'member',
                'admin'
            ]),
            archived: z.boolean(),
            muted: z.boolean(),
            order: z.number().gte(-140737488355328).lte(140737488355327),
            organizationId: z.string()
        }),
        invitesCount: z.number()
    })
});

export const zGetOrganizationsByIdOrSlugParameterIdOrSlug = z.string();

/**
 * Organization
 */
export const zGetOrganizationsByIdOrSlugResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        entityType: z.enum([
            'organization'
        ]),
        name: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        slug: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        bannerUrl: z.union([
            z.string(),
            z.null()
        ]),
        shortName: z.union([
            z.string(),
            z.null()
        ]),
        country: z.union([
            z.string(),
            z.null()
        ]),
        timezone: z.union([
            z.string(),
            z.null()
        ]),
        defaultLanguage: z.enum([
            'en',
            'nl'
        ]),
        languages: z.array(z.enum([
            'en',
            'nl'
        ])).min(1),
        restrictions: z.union([
            z.string(),
            z.number(),
            z.boolean(),
            z.null(),
            z.object({}),
            z.array(z.unknown())
        ]),
        notificationEmail: z.union([
            z.string(),
            z.null()
        ]),
        emailDomains: z.array(z.string()),
        color: z.union([
            z.string(),
            z.null()
        ]),
        logoUrl: z.union([
            z.string(),
            z.null()
        ]),
        websiteUrl: z.union([
            z.string(),
            z.null()
        ]),
        welcomeText: z.union([
            z.string(),
            z.null()
        ]),
        authStrategies: z.array(z.string()),
        chatSupport: z.boolean(),
        createdAt: z.string(),
        createdBy: z.union([
            z.string(),
            z.null()
        ]),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ]),
        membership: z.union([
            z.object({
                id: z.string(),
                contextType: z.enum([
                    'organization'
                ]),
                userId: z.string(),
                role: z.enum([
                    'member',
                    'admin'
                ]),
                archived: z.boolean(),
                muted: z.boolean(),
                order: z.number().gte(-140737488355328).lte(140737488355327),
                organizationId: z.string()
            }),
            z.null()
        ]),
        invitesCount: z.number()
    })
});

export const zPutOrganizationsByIdOrSlugData = z.object({
    slug: z.string().min(2).max(100).optional(),
    name: z.string().min(2).max(100).optional(),
    shortName: z.union([
        z.string().min(2).max(100),
        z.null()
    ]).optional(),
    country: z.union([
        z.string(),
        z.null()
    ]).optional(),
    timezone: z.union([
        z.string(),
        z.null()
    ]).optional(),
    defaultLanguage: z.enum([
        'en',
        'nl'
    ]).optional(),
    languages: z.array(z.enum([
        'en',
        'nl'
    ])).min(1).optional(),
    notificationEmail: z.union([
        z.string(),
        z.null()
    ]).optional(),
    emailDomains: z.array(z.string().min(4).max(100)).optional(),
    color: z.union([
        z.string(),
        z.null()
    ]).optional(),
    thumbnailUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    logoUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    bannerUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    websiteUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    welcomeText: z.union([
        z.string(),
        z.null()
    ]).optional(),
    authStrategies: z.array(z.string()).optional(),
    chatSupport: z.boolean().optional()
});

export const zPutOrganizationsByIdOrSlugParameterIdOrSlug = z.string();

/**
 * Organization was updated
 */
export const zPutOrganizationsByIdOrSlugResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        entityType: z.enum([
            'organization'
        ]),
        name: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        slug: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        bannerUrl: z.union([
            z.string(),
            z.null()
        ]),
        shortName: z.union([
            z.string(),
            z.null()
        ]),
        country: z.union([
            z.string(),
            z.null()
        ]),
        timezone: z.union([
            z.string(),
            z.null()
        ]),
        defaultLanguage: z.enum([
            'en',
            'nl'
        ]),
        languages: z.array(z.enum([
            'en',
            'nl'
        ])).min(1),
        restrictions: z.union([
            z.string(),
            z.number(),
            z.boolean(),
            z.null(),
            z.object({}),
            z.array(z.unknown())
        ]),
        notificationEmail: z.union([
            z.string(),
            z.null()
        ]),
        emailDomains: z.array(z.string()),
        color: z.union([
            z.string(),
            z.null()
        ]),
        logoUrl: z.union([
            z.string(),
            z.null()
        ]),
        websiteUrl: z.union([
            z.string(),
            z.null()
        ]),
        welcomeText: z.union([
            z.string(),
            z.null()
        ]),
        authStrategies: z.array(z.string()),
        chatSupport: z.boolean(),
        createdAt: z.string(),
        createdBy: z.union([
            z.string(),
            z.null()
        ]),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ]),
        membership: z.union([
            z.object({
                id: z.string(),
                contextType: z.enum([
                    'organization'
                ]),
                userId: z.string(),
                role: z.enum([
                    'member',
                    'admin'
                ]),
                archived: z.boolean(),
                muted: z.boolean(),
                order: z.number().gte(-140737488355328).lte(140737488355327),
                organizationId: z.string()
            }),
            z.null()
        ]),
        invitesCount: z.number()
    })
});

export const zGetEntitiesPageParameterQ = z.string();

export const zGetEntitiesPageParameterTargetUserId = z.string();

export const zGetEntitiesPageParameterType = z.enum([
    'user',
    'organization'
]);

export const zGetEntitiesPageParameterTargetOrgId = z.string();

export const zGetEntitiesPageParameterUserMembershipType = z.enum([
    'organization'
]);

/**
 * Page entities
 */
export const zGetEntitiesPageResponse = z.object({
    success: z.boolean(),
    data: z.object({
        items: z.array(z.object({
            id: z.string(),
            entityType: z.enum([
                'user',
                'organization'
            ]),
            slug: z.string(),
            name: z.string(),
            thumbnailUrl: z.union([
                z.string(),
                z.null()
            ]).optional(),
            bannerUrl: z.union([
                z.string(),
                z.null()
            ]).optional(),
            email: z.string().optional(),
            membership: z.union([
                z.object({
                    id: z.string(),
                    contextType: z.enum([
                        'organization'
                    ]),
                    userId: z.string(),
                    role: z.enum([
                        'member',
                        'admin'
                    ]),
                    archived: z.boolean(),
                    muted: z.boolean(),
                    order: z.number().gte(-140737488355328).lte(140737488355327),
                    organizationId: z.string()
                }),
                z.null()
            ])
        })),
        counts: z.object({
            user: z.number().optional(),
            organization: z.number().optional()
        }),
        total: z.number()
    })
});

export const zGetEntitiesContextParameterQ = z.string();

export const zGetEntitiesContextParameterTargetUserId = z.string();

export const zGetEntitiesContextParameterType = z.enum([
    'organization'
]);

export const zGetEntitiesContextParameterSort = z.enum([
    'name',
    'createdAt'
]);

/**
 * Context entities
 */
export const zGetEntitiesContextResponse = z.object({
    success: z.boolean(),
    data: z.array(z.object({
        id: z.string(),
        entityType: z.enum([
            'organization'
        ]),
        slug: z.string(),
        name: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]).optional(),
        bannerUrl: z.union([
            z.string(),
            z.null()
        ]).optional(),
        createdAt: z.string(),
        membership: z.object({
            id: z.string(),
            contextType: z.enum([
                'organization'
            ]),
            userId: z.string(),
            role: z.enum([
                'member',
                'admin'
            ]),
            archived: z.boolean(),
            muted: z.boolean(),
            order: z.number().gte(-140737488355328).lte(140737488355327),
            organizationId: z.string()
        }),
        members: z.array(z.unknown())
    }))
});

export const zPostEntitiesCheckSlugData = z.object({
    slug: z.string()
});

/**
 * Slug is available
 */
export const zPostEntitiesCheckSlugResponse = z.object({
    success: z.boolean()
});

export const zPostSystemInviteData = z.object({
    emails: z.array(z.string().email()).min(1).max(50)
});

/**
 * Invitations are sent
 */
export const zPostSystemInviteResponse = z.object({
    success: z.boolean()
});

export const zGetSystemPresignedUrlParameterKey = z.string();

/**
 * Presigned URL
 */
export const zGetSystemPresignedUrlResponse = z.object({
    success: z.boolean(),
    data: z.string()
});

export const zPostSystemPaddleWebhookData = z.unknown();

/**
 * Paddle webhook received
 */
export const zPostSystemPaddleWebhookResponse = z.object({
    success: z.boolean()
});

export const zPostSystemNewsletterData = z.object({
    organizationIds: z.array(z.string()),
    roles: z.array(z.enum([
        'member',
        'admin'
    ])).min(1),
    subject: z.string(),
    content: z.string()
});

export const zPostSystemNewsletterParameterToSelf = z.union([
    z.string(),
    z.boolean()
]);

/**
 * Organization
 */
export const zPostSystemNewsletterResponse = z.object({
    success: z.boolean()
});

export const zDeleteRequestsData = z.object({
    ids: z.array(z.string()).min(1).max(50)
});

/**
 * Requests
 */
export const zDeleteRequestsResponse = z.object({
    success: z.boolean()
});

export const zGetRequestsParameterQ = z.string();

export const zGetRequestsParameterSort = z.enum([
    'id',
    'email',
    'type',
    'createdAt'
]);

export const zGetRequestsParameterOrder = z.enum([
    'asc',
    'desc'
]);

export const zGetRequestsParameterOffset = z.string().default('0');

export const zGetRequestsParameterLimit = z.string().default('40');

/**
 * Requests
 */
export const zGetRequestsResponse = z.object({
    success: z.boolean(),
    data: z.object({
        items: z.array(z.object({
            id: z.string(),
            message: z.union([
                z.string(),
                z.null()
            ]),
            email: z.string(),
            type: z.enum([
                'waitlist',
                'newsletter',
                'contact'
            ]),
            createdAt: z.string(),
            wasInvited: z.boolean()
        })),
        total: z.number()
    })
});

export const zPostRequestsData = z.object({
    email: z.string().email().min(1),
    type: z.enum([
        'waitlist',
        'newsletter',
        'contact'
    ]),
    message: z.union([
        z.string(),
        z.null()
    ])
});

/**
 * Requests
 */
export const zPostRequestsResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        message: z.union([
            z.string(),
            z.null()
        ]),
        email: z.string(),
        type: z.enum([
            'waitlist',
            'newsletter',
            'contact'
        ]),
        createdAt: z.string(),
        wasInvited: z.boolean()
    })
});

/**
 * Metrics
 */
export const zGetMetricsResponse = z.object({
    success: z.boolean(),
    data: z.array(z.object({
        date: z.string(),
        count: z.number()
    }))
});

/**
 * Public counts
 */
export const zGetMetricsPublicResponse = z.object({
    success: z.boolean(),
    data: z.object({
        0: z.number(),
        1: z.number(),
        2: z.number()
    })
});

export const zGetByOrgIdOrSlugAttachmentsShapeProxyParameterOrgIdOrSlug = z.string();

export const zDeleteAttachmentsData = z.object({
    ids: z.array(z.string()).min(1).max(50)
});

export const zDeleteAttachmentsParameterOrgIdOrSlug = z.string();

/**
 * Success
 */
export const zDeleteAttachmentsResponse = z.object({
    success: z.boolean(),
    errors: z.array(z.object({
        message: z.string(),
        type: z.string(),
        status: z.number(),
        severity: z.enum([
            'debug',
            'log',
            'info',
            'warn',
            'error'
        ]),
        entityType: z.enum([
            'user',
            'organization',
            'attachment'
        ]).optional(),
        logId: z.string().optional(),
        path: z.string().optional(),
        method: z.string().optional(),
        timestamp: z.string().optional(),
        usr: z.string().optional(),
        org: z.string().optional()
    }))
});

export const zGetAttachmentsParameterOrgIdOrSlug = z.string();

export const zGetAttachmentsParameterQ = z.string();

export const zGetAttachmentsParameterSort = z.enum([
    'id',
    'filename',
    'contentType',
    'createdAt'
]);

export const zGetAttachmentsParameterOrder = z.enum([
    'asc',
    'desc'
]);

export const zGetAttachmentsParameterOffset = z.string().default('0');

export const zGetAttachmentsParameterLimit = z.string().default('40');

export const zGetAttachmentsParameterAttachmentId = z.string();

/**
 * Attachments
 */
export const zGetAttachmentsResponse = z.object({
    success: z.boolean(),
    data: z.object({
        items: z.array(z.object({
            id: z.string(),
            name: z.string(),
            entityType: z.enum([
                'attachment'
            ]),
            groupId: z.union([
                z.string(),
                z.null()
            ]),
            filename: z.string(),
            contentType: z.string(),
            convertedContentType: z.union([
                z.string(),
                z.null()
            ]),
            size: z.string(),
            createdAt: z.string(),
            createdBy: z.union([
                z.string(),
                z.null()
            ]),
            modifiedAt: z.union([
                z.string(),
                z.null()
            ]),
            modifiedBy: z.union([
                z.string(),
                z.null()
            ]),
            organizationId: z.string(),
            url: z.string(),
            thumbnailUrl: z.union([
                z.string(),
                z.null()
            ]),
            convertedUrl: z.union([
                z.string(),
                z.null()
            ])
        })),
        total: z.number()
    })
});

export const zCreateAttachmentData = z.array(z.object({
    id: z.string().optional(),
    groupId: z.union([
        z.string(),
        z.null()
    ]).optional(),
    filename: z.string(),
    contentType: z.string(),
    convertedContentType: z.union([
        z.string(),
        z.null()
    ]).optional(),
    size: z.string(),
    originalKey: z.string(),
    convertedKey: z.union([
        z.string(),
        z.null()
    ]).optional(),
    thumbnailKey: z.union([
        z.string(),
        z.null()
    ]).optional(),
    organizationId: z.string()
})).min(1).max(50);

export const zCreateAttachmentParameterOrgIdOrSlug = z.string();

/**
 * Attachment
 */
export const zCreateAttachmentResponse = z.object({
    success: z.boolean(),
    data: z.array(z.object({
        id: z.string(),
        name: z.string(),
        entityType: z.enum([
            'attachment'
        ]),
        groupId: z.union([
            z.string(),
            z.null()
        ]),
        filename: z.string(),
        contentType: z.string(),
        convertedContentType: z.union([
            z.string(),
            z.null()
        ]),
        size: z.string(),
        createdAt: z.string(),
        createdBy: z.union([
            z.string(),
            z.null()
        ]),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ]),
        organizationId: z.string(),
        url: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        convertedUrl: z.union([
            z.string(),
            z.null()
        ])
    }))
});

export const zGetAttachmentParameterId = z.string();

export const zGetAttachmentParameterOrgIdOrSlug = z.string();

/**
 * Attachment
 */
export const zGetAttachmentResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        name: z.string(),
        entityType: z.enum([
            'attachment'
        ]),
        groupId: z.union([
            z.string(),
            z.null()
        ]),
        filename: z.string(),
        contentType: z.string(),
        convertedContentType: z.union([
            z.string(),
            z.null()
        ]),
        size: z.string(),
        createdAt: z.string(),
        createdBy: z.union([
            z.string(),
            z.null()
        ]),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ]),
        organizationId: z.string(),
        url: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        convertedUrl: z.union([
            z.string(),
            z.null()
        ])
    })
});

export const zUpdateAttachmentData = z.object({
    name: z.string().optional(),
    originalKey: z.string().optional()
});

export const zUpdateAttachmentParameterId = z.string();

export const zUpdateAttachmentParameterOrgIdOrSlug = z.string();

/**
 * Attachment was updated
 */
export const zUpdateAttachmentResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        name: z.string(),
        entityType: z.enum([
            'attachment'
        ]),
        groupId: z.union([
            z.string(),
            z.null()
        ]),
        filename: z.string(),
        contentType: z.string(),
        convertedContentType: z.union([
            z.string(),
            z.null()
        ]),
        size: z.string(),
        createdAt: z.string(),
        createdBy: z.union([
            z.string(),
            z.null()
        ]),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ]),
        organizationId: z.string(),
        url: z.string(),
        thumbnailUrl: z.union([
            z.string(),
            z.null()
        ]),
        convertedUrl: z.union([
            z.string(),
            z.null()
        ])
    })
});

export const zGetByOrgIdOrSlugAttachmentsByIdCoverParameterId = z.string();

export const zGetByOrgIdOrSlugAttachmentsByIdLinkParameterId = z.string();

export const zDeleteByOrgIdOrSlugMembershipsData = z.object({
    ids: z.array(z.string()).min(1).max(50)
});

export const zDeleteByOrgIdOrSlugMembershipsParameterOrgIdOrSlug = z.string();

export const zDeleteByOrgIdOrSlugMembershipsParameterIdOrSlug = z.string();

export const zDeleteByOrgIdOrSlugMembershipsParameterEntityType = z.enum([
    'organization'
]);

/**
 * Success
 */
export const zDeleteByOrgIdOrSlugMembershipsResponse = z.object({
    success: z.boolean(),
    errors: z.array(z.object({
        message: z.string(),
        type: z.string(),
        status: z.number(),
        severity: z.enum([
            'debug',
            'log',
            'info',
            'warn',
            'error'
        ]),
        entityType: z.enum([
            'user',
            'organization',
            'attachment'
        ]).optional(),
        logId: z.string().optional(),
        path: z.string().optional(),
        method: z.string().optional(),
        timestamp: z.string().optional(),
        usr: z.string().optional(),
        org: z.string().optional()
    }))
});

export const zPostByOrgIdOrSlugMembershipsData = z.object({
    emails: z.array(z.string().min(4).max(100)).min(1).max(50),
    role: z.enum([
        'member',
        'admin'
    ])
});

export const zPostByOrgIdOrSlugMembershipsParameterOrgIdOrSlug = z.string();

export const zPostByOrgIdOrSlugMembershipsParameterIdOrSlug = z.string();

export const zPostByOrgIdOrSlugMembershipsParameterEntityType = z.enum([
    'organization'
]);

/**
 * Invitation was sent
 */
export const zPostByOrgIdOrSlugMembershipsResponse = z.object({
    success: z.boolean()
});

export const zPutByOrgIdOrSlugMembershipsByIdData = z.object({
    role: z.enum([
        'member',
        'admin'
    ]).optional(),
    muted: z.boolean().optional(),
    archived: z.boolean().optional(),
    order: z.number().optional()
});

export const zPutByOrgIdOrSlugMembershipsByIdParameterId = z.string();

export const zPutByOrgIdOrSlugMembershipsByIdParameterOrgIdOrSlug = z.string();

/**
 * Membership updated
 */
export const zPutByOrgIdOrSlugMembershipsByIdResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.string(),
        contextType: z.enum([
            'organization'
        ]),
        userId: z.string(),
        role: z.enum([
            'member',
            'admin'
        ]),
        createdAt: z.string(),
        createdBy: z.union([
            z.string(),
            z.null()
        ]),
        modifiedAt: z.union([
            z.string(),
            z.null()
        ]),
        modifiedBy: z.union([
            z.string(),
            z.null()
        ]),
        archived: z.boolean(),
        muted: z.boolean(),
        order: z.number().gte(-140737488355328).lte(140737488355327),
        organizationId: z.string()
    })
});

export const zGetByOrgIdOrSlugMembershipsMembersParameterOrgIdOrSlug = z.string();

export const zGetByOrgIdOrSlugMembershipsMembersParameterQ = z.string();

export const zGetByOrgIdOrSlugMembershipsMembersParameterSort = z.enum([
    'id',
    'name',
    'email',
    'role',
    'createdAt',
    'lastSeenAt'
]);

export const zGetByOrgIdOrSlugMembershipsMembersParameterOrder = z.enum([
    'asc',
    'desc'
]);

export const zGetByOrgIdOrSlugMembershipsMembersParameterOffset = z.string().default('0');

export const zGetByOrgIdOrSlugMembershipsMembersParameterLimit = z.string().default('40');

export const zGetByOrgIdOrSlugMembershipsMembersParameterIdOrSlug = z.string();

export const zGetByOrgIdOrSlugMembershipsMembersParameterEntityType = z.enum([
    'organization'
]);

export const zGetByOrgIdOrSlugMembershipsMembersParameterRole = z.enum([
    'member',
    'admin'
]);

/**
 * Members
 */
export const zGetByOrgIdOrSlugMembershipsMembersResponse = z.object({
    success: z.boolean(),
    data: z.object({
        items: z.array(z.object({
            id: z.string(),
            entityType: z.enum([
                'user'
            ]),
            name: z.string(),
            description: z.union([
                z.string(),
                z.null()
            ]),
            slug: z.string(),
            thumbnailUrl: z.union([
                z.string(),
                z.null()
            ]),
            bannerUrl: z.union([
                z.string(),
                z.null()
            ]),
            email: z.string().email(),
            firstName: z.union([
                z.string(),
                z.null()
            ]),
            lastName: z.union([
                z.string(),
                z.null()
            ]),
            language: z.enum([
                'en',
                'nl'
            ]),
            newsletter: z.boolean(),
            role: z.enum([
                'user',
                'admin'
            ]),
            createdAt: z.string(),
            modifiedAt: z.union([
                z.string(),
                z.null()
            ]),
            lastSeenAt: z.union([
                z.string(),
                z.null()
            ]),
            lastStartedAt: z.union([
                z.string(),
                z.null()
            ]),
            lastSignInAt: z.union([
                z.string(),
                z.null()
            ]),
            modifiedBy: z.union([
                z.string(),
                z.null()
            ]),
            membership: z.object({
                id: z.string(),
                contextType: z.enum([
                    'organization'
                ]),
                userId: z.string(),
                role: z.enum([
                    'member',
                    'admin'
                ]),
                archived: z.boolean(),
                muted: z.boolean(),
                order: z.number().gte(-140737488355328).lte(140737488355327),
                organizationId: z.string()
            })
        })),
        total: z.number()
    })
});

export const zGetByOrgIdOrSlugMembershipsPendingParameterOrgIdOrSlug = z.string();

export const zGetByOrgIdOrSlugMembershipsPendingParameterQ = z.string();

export const zGetByOrgIdOrSlugMembershipsPendingParameterSort = z.enum([
    'email',
    'role',
    'expiresAt',
    'createdAt',
    'createdBy'
]);

export const zGetByOrgIdOrSlugMembershipsPendingParameterOrder = z.enum([
    'asc',
    'desc'
]);

export const zGetByOrgIdOrSlugMembershipsPendingParameterOffset = z.string().default('0');

export const zGetByOrgIdOrSlugMembershipsPendingParameterLimit = z.string().default('40');

export const zGetByOrgIdOrSlugMembershipsPendingParameterIdOrSlug = z.string();

export const zGetByOrgIdOrSlugMembershipsPendingParameterEntityType = z.enum([
    'organization'
]);

/**
 * Invited members
 */
export const zGetByOrgIdOrSlugMembershipsPendingResponse = z.object({
    success: z.boolean(),
    data: z.object({
        items: z.array(z.object({
            id: z.string(),
            email: z.string(),
            role: z.enum([
                'member',
                'admin'
            ]),
            createdAt: z.string(),
            createdBy: z.union([
                z.string(),
                z.null()
            ]),
            expiresAt: z.string(),
            name: z.union([
                z.string(),
                z.null()
            ])
        })),
        total: z.number()
    })
});