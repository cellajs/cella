// This file is auto-generated by @hey-api/openapi-ts

export type PostAuthCheckEmailData = {
    body?: {
        email: string;
    };
    path?: never;
    query?: never;
    url: '/auth/check-email';
};

export type PostAuthCheckEmailErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthCheckEmailError = PostAuthCheckEmailErrors[keyof PostAuthCheckEmailErrors];

export type PostAuthCheckEmailResponses = {
    /**
     * Email exists
     */
    200: {
        success: boolean;
    };
};

export type PostAuthCheckEmailResponse = PostAuthCheckEmailResponses[keyof PostAuthCheckEmailResponses];

export type PostAuthSignUpData = {
    body?: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/auth/sign-up';
};

export type PostAuthSignUpErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthSignUpError = PostAuthSignUpErrors[keyof PostAuthSignUpErrors];

export type PostAuthSignUpResponses = {
    /**
     * User signed up
     */
    200: {
        success: boolean;
    };
};

export type PostAuthSignUpResponse = PostAuthSignUpResponses[keyof PostAuthSignUpResponses];

export type PostAuthSignUpByTokenData = {
    body?: {
        email: string;
        password: string;
    };
    path: {
        token: string;
    };
    query?: never;
    url: '/auth/sign-up/{token}';
};

export type PostAuthSignUpByTokenErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthSignUpByTokenError = PostAuthSignUpByTokenErrors[keyof PostAuthSignUpByTokenErrors];

export type PostAuthSignUpByTokenResponses = {
    /**
     * User signed up
     */
    200: {
        success: boolean;
    };
};

export type PostAuthSignUpByTokenResponse = PostAuthSignUpByTokenResponses[keyof PostAuthSignUpByTokenResponses];

export type PostAuthSendVerificationEmailData = {
    body?: {
        tokenId?: string;
        userId?: string;
    };
    path?: never;
    query?: never;
    url: '/auth/send-verification-email';
};

export type PostAuthSendVerificationEmailErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthSendVerificationEmailError = PostAuthSendVerificationEmailErrors[keyof PostAuthSendVerificationEmailErrors];

export type PostAuthSendVerificationEmailResponses = {
    /**
     * Verification email sent
     */
    200: {
        success: boolean;
    };
};

export type PostAuthSendVerificationEmailResponse = PostAuthSendVerificationEmailResponses[keyof PostAuthSendVerificationEmailResponses];

export type PostAuthVerifyEmailByTokenData = {
    body?: never;
    path: {
        token: string;
    };
    query?: never;
    url: '/auth/verify-email/{token}';
};

export type PostAuthVerifyEmailByTokenErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthVerifyEmailByTokenError = PostAuthVerifyEmailByTokenErrors[keyof PostAuthVerifyEmailByTokenErrors];

export type PostAuthVerifyEmailByTokenResponses = {
    /**
     * Verified & session given
     */
    200: {
        success: boolean;
    };
};

export type PostAuthVerifyEmailByTokenResponse = PostAuthVerifyEmailByTokenResponses[keyof PostAuthVerifyEmailByTokenResponses];

export type PostAuthRequestPasswordData = {
    body?: {
        email: string;
    };
    path?: never;
    query?: never;
    url: '/auth/request-password';
};

export type PostAuthRequestPasswordErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthRequestPasswordError = PostAuthRequestPasswordErrors[keyof PostAuthRequestPasswordErrors];

export type PostAuthRequestPasswordResponses = {
    /**
     * Password reset email sent
     */
    200: {
        success: boolean;
    };
};

export type PostAuthRequestPasswordResponse = PostAuthRequestPasswordResponses[keyof PostAuthRequestPasswordResponses];

export type PostAuthCreatePasswordByTokenData = {
    body?: {
        password: string;
    };
    path: {
        token: string;
    };
    query?: never;
    url: '/auth/create-password/{token}';
};

export type PostAuthCreatePasswordByTokenErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthCreatePasswordByTokenError = PostAuthCreatePasswordByTokenErrors[keyof PostAuthCreatePasswordByTokenErrors];

export type PostAuthCreatePasswordByTokenResponses = {
    /**
     * Password created
     */
    200: {
        success: boolean;
    };
};

export type PostAuthCreatePasswordByTokenResponse = PostAuthCreatePasswordByTokenResponses[keyof PostAuthCreatePasswordByTokenResponses];

export type PostAuthSignInData = {
    body?: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/auth/sign-in';
};

export type PostAuthSignInErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthSignInError = PostAuthSignInErrors[keyof PostAuthSignInErrors];

export type PostAuthSignInResponses = {
    /**
     * User signed in
     */
    200: {
        success: boolean;
        data: {
            emailVerified: boolean;
        };
    };
};

export type PostAuthSignInResponse = PostAuthSignInResponses[keyof PostAuthSignInResponses];

export type PostAuthCheckTokenByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query: {
        type: 'email_verification' | 'password_reset' | 'invitation';
    };
    url: '/auth/check-token/{id}';
};

export type PostAuthCheckTokenByIdErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthCheckTokenByIdError = PostAuthCheckTokenByIdErrors[keyof PostAuthCheckTokenByIdErrors];

export type PostAuthCheckTokenByIdResponses = {
    /**
     * Token is valid
     */
    200: {
        success: boolean;
        data: {
            email: string;
            userId?: string;
            organizationName?: string;
            organizationSlug?: string;
            organizationId?: string;
        };
    };
};

export type PostAuthCheckTokenByIdResponse = PostAuthCheckTokenByIdResponses[keyof PostAuthCheckTokenByIdResponses];

export type PostAuthAcceptInviteByTokenData = {
    body?: never;
    path: {
        token: string;
    };
    query?: never;
    url: '/auth/accept-invite/{token}';
};

export type PostAuthAcceptInviteByTokenErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthAcceptInviteByTokenError = PostAuthAcceptInviteByTokenErrors[keyof PostAuthAcceptInviteByTokenErrors];

export type PostAuthAcceptInviteByTokenResponses = {
    /**
     * Invitation was accepted
     */
    200: {
        success: boolean;
    };
};

export type PostAuthAcceptInviteByTokenResponse = PostAuthAcceptInviteByTokenResponses[keyof PostAuthAcceptInviteByTokenResponses];

export type GetAuthImpersonationStartData = {
    body?: never;
    path?: never;
    query: {
        targetUserId: string;
    };
    url: '/auth/impersonation/start';
};

export type GetAuthImpersonationStartErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthImpersonationStartError = GetAuthImpersonationStartErrors[keyof GetAuthImpersonationStartErrors];

export type GetAuthImpersonationStartResponses = {
    /**
     * Impersonating
     */
    200: {
        success: boolean;
    };
};

export type GetAuthImpersonationStartResponse = GetAuthImpersonationStartResponses[keyof GetAuthImpersonationStartResponses];

export type GetAuthImpersonationStopData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/impersonation/stop';
};

export type GetAuthImpersonationStopErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthImpersonationStopError = GetAuthImpersonationStopErrors[keyof GetAuthImpersonationStopErrors];

export type GetAuthImpersonationStopResponses = {
    /**
     * Stopped impersonating
     */
    200: {
        success: boolean;
    };
};

export type GetAuthImpersonationStopResponse = GetAuthImpersonationStopResponses[keyof GetAuthImpersonationStopResponses];

export type GetAuthSignOutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/sign-out';
};

export type GetAuthSignOutErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthSignOutError = GetAuthSignOutErrors[keyof GetAuthSignOutErrors];

export type GetAuthSignOutResponses = {
    /**
     * User signed out
     */
    200: {
        success: boolean;
    };
};

export type GetAuthSignOutResponse = GetAuthSignOutResponses[keyof GetAuthSignOutResponses];

export type GetAuthGithubData = {
    body?: never;
    path?: never;
    query: {
        type: 'auth' | 'connect' | 'invite';
        redirect?: string;
        connect?: string;
        token?: string;
    };
    url: '/auth/github';
};

export type GetAuthGithubErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthGithubError = GetAuthGithubErrors[keyof GetAuthGithubErrors];

export type GetAuthGoogleData = {
    body?: never;
    path?: never;
    query: {
        type: 'auth' | 'connect' | 'invite';
        redirect?: string;
        connect?: string;
        token?: string;
    };
    url: '/auth/google';
};

export type GetAuthGoogleErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthGoogleError = GetAuthGoogleErrors[keyof GetAuthGoogleErrors];

export type GetAuthMicrosoftData = {
    body?: never;
    path?: never;
    query: {
        type: 'auth' | 'connect' | 'invite';
        redirect?: string;
        connect?: string;
        token?: string;
    };
    url: '/auth/microsoft';
};

export type GetAuthMicrosoftErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthMicrosoftError = GetAuthMicrosoftErrors[keyof GetAuthMicrosoftErrors];

export type GetAuthGithubCallbackData = {
    body?: never;
    path?: never;
    query: {
        code: string;
        state: string;
        error?: string;
        error_description?: string;
        error_uri?: string;
    };
    url: '/auth/github/callback';
};

export type GetAuthGithubCallbackErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthGithubCallbackError = GetAuthGithubCallbackErrors[keyof GetAuthGithubCallbackErrors];

export type GetAuthGoogleCallbackData = {
    body?: never;
    path?: never;
    query: {
        code: string;
        state: string;
    };
    url: '/auth/google/callback';
};

export type GetAuthGoogleCallbackErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthGoogleCallbackError = GetAuthGoogleCallbackErrors[keyof GetAuthGoogleCallbackErrors];

export type GetAuthMicrosoftCallbackData = {
    body?: never;
    path?: never;
    query: {
        code: string;
        state: string;
    };
    url: '/auth/microsoft/callback';
};

export type GetAuthMicrosoftCallbackErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthMicrosoftCallbackError = GetAuthMicrosoftCallbackErrors[keyof GetAuthMicrosoftCallbackErrors];

export type GetAuthPasskeyChallengeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/passkey-challenge';
};

export type GetAuthPasskeyChallengeErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetAuthPasskeyChallengeError = GetAuthPasskeyChallengeErrors[keyof GetAuthPasskeyChallengeErrors];

export type GetAuthPasskeyChallengeResponses = {
    /**
     * Challenge created
     */
    200: {
        challengeBase64: string;
    };
};

export type GetAuthPasskeyChallengeResponse = GetAuthPasskeyChallengeResponses[keyof GetAuthPasskeyChallengeResponses];

export type PostAuthPasskeyVerificationData = {
    body?: {
        clientDataJSON: string;
        authenticatorData: string;
        signature: string;
        userEmail: string;
    };
    path?: never;
    query?: never;
    url: '/auth/passkey-verification';
};

export type PostAuthPasskeyVerificationErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostAuthPasskeyVerificationError = PostAuthPasskeyVerificationErrors[keyof PostAuthPasskeyVerificationErrors];

export type PostAuthPasskeyVerificationResponses = {
    /**
     * Passkey verified
     */
    200: {
        success: boolean;
    };
};

export type PostAuthPasskeyVerificationResponse = PostAuthPasskeyVerificationResponses[keyof PostAuthPasskeyVerificationResponses];

export type DeleteSelfData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me';
};

export type DeleteSelfErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type DeleteSelfError = DeleteSelfErrors[keyof DeleteSelfErrors];

export type DeleteSelfResponses = {
    /**
     * User deleted
     */
    200: {
        success: boolean;
    };
};

export type DeleteSelfResponse = DeleteSelfResponses[keyof DeleteSelfResponses];

export type GetSelfData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me';
};

export type GetSelfErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetSelfError = GetSelfErrors[keyof GetSelfErrors];

export type GetSelfResponses = {
    /**
     * User
     */
    200: {
        success: boolean;
        data: {
            id: string;
            entityType: 'user';
            name: string;
            description: string | null;
            slug: string;
            thumbnailUrl: string | null;
            bannerUrl: string | null;
            email: string;
            firstName: string | null;
            lastName: string | null;
            language: 'en' | 'nl';
            newsletter: boolean;
            role: 'user' | 'admin';
            createdAt: string;
            modifiedAt: string | null;
            lastSeenAt: string | null;
            lastStartedAt: string | null;
            lastSignInAt: string | null;
            modifiedBy: string | null;
        };
    };
};

export type GetSelfResponse = GetSelfResponses[keyof GetSelfResponses];

export type UpdateSelfData = {
    body?: {
        bannerUrl?: string | null;
        firstName?: string | null;
        lastName?: string | null;
        language?: 'en' | 'nl';
        newsletter?: boolean;
        thumbnailUrl?: string | null;
        slug?: string;
    };
    path?: never;
    query?: never;
    url: '/me';
};

export type UpdateSelfErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type UpdateSelfError = UpdateSelfErrors[keyof UpdateSelfErrors];

export type UpdateSelfResponses = {
    /**
     * User
     */
    200: {
        success: boolean;
        data: {
            id: string;
            entityType: 'user';
            name: string;
            description: string | null;
            slug: string;
            thumbnailUrl: string | null;
            bannerUrl: string | null;
            email: string;
            firstName: string | null;
            lastName: string | null;
            language: 'en' | 'nl';
            newsletter: boolean;
            role: 'user' | 'admin';
            createdAt: string;
            modifiedAt: string | null;
            lastSeenAt: string | null;
            lastStartedAt: string | null;
            lastSignInAt: string | null;
            modifiedBy: string | null;
        };
    };
};

export type UpdateSelfResponse = UpdateSelfResponses[keyof UpdateSelfResponses];

export type GetSelfAuthInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/auth';
};

export type GetSelfAuthInfoErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetSelfAuthInfoError = GetSelfAuthInfoErrors[keyof GetSelfAuthInfoErrors];

export type GetSelfAuthInfoResponses = {
    /**
     * User sign-up info
     */
    200: {
        success: boolean;
        data: {
            oauth: Array<'github'>;
            passkey: boolean;
            sessions: Array<{
                id: string;
                type: 'regular' | 'impersonation';
                userId: string;
                deviceName: string | null;
                deviceType: 'desktop' | 'mobile';
                deviceOs: string | null;
                browser: string | null;
                authStrategy: 'github' | 'google' | 'microsoft' | 'password' | 'passkey';
                createdAt: string;
                expiresAt: string;
                isCurrent: boolean;
            }>;
        };
    };
};

export type GetSelfAuthInfoResponse = GetSelfAuthInfoResponses[keyof GetSelfAuthInfoResponses];

export type GetMenuData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/menu';
};

export type GetMenuErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetMenuError = GetMenuErrors[keyof GetMenuErrors];

export type GetMenuResponses = {
    /**
     * Menu of user
     */
    200: {
        success: boolean;
        data: {
            organization: Array<{
                id: string;
                entityType: 'organization';
                slug: string;
                name: string;
                thumbnailUrl?: string | null;
                createdAt: string;
                modifiedAt: string | null;
                membership: {
                    id: string;
                    contextType: 'organization';
                    userId: string;
                    role: 'member' | 'admin';
                    archived: boolean;
                    muted: boolean;
                    order: number;
                    organizationId: string;
                };
                organizationId?: string;
                submenu?: Array<{
                    id: string;
                    entityType: 'organization';
                    slug: string;
                    name: string;
                    thumbnailUrl?: string | null;
                    createdAt: string;
                    modifiedAt: string | null;
                    membership: {
                        id: string;
                        contextType: 'organization';
                        userId: string;
                        role: 'member' | 'admin';
                        archived: boolean;
                        muted: boolean;
                        order: number;
                        organizationId: string;
                    };
                    organizationId?: string;
                }>;
            }>;
        };
    };
};

export type GetMenuResponse = GetMenuResponses[keyof GetMenuResponses];

export type TerminateSessionsData = {
    body?: {
        ids: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/me/sessions';
};

export type TerminateSessionsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type TerminateSessionsError = TerminateSessionsErrors[keyof TerminateSessionsErrors];

export type TerminateSessionsResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        errors: Array<{
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        }>;
    };
};

export type TerminateSessionsResponse = TerminateSessionsResponses[keyof TerminateSessionsResponses];

export type LeaveEntityData = {
    body?: never;
    path?: never;
    query: {
        idOrSlug: string;
        entityType: 'organization';
    };
    url: '/me/leave';
};

export type LeaveEntityErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type LeaveEntityError = LeaveEntityErrors[keyof LeaveEntityErrors];

export type LeaveEntityResponses = {
    /**
     * Membership removed
     */
    200: {
        success: boolean;
    };
};

export type LeaveEntityResponse = LeaveEntityResponses[keyof LeaveEntityResponses];

export type RemovePasskeyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/passkey';
};

export type RemovePasskeyErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type RemovePasskeyError = RemovePasskeyErrors[keyof RemovePasskeyErrors];

export type RemovePasskeyResponses = {
    /**
     * Passkey removed
     */
    200: {
        success: boolean;
    };
};

export type RemovePasskeyResponse = RemovePasskeyResponses[keyof RemovePasskeyResponses];

export type AssignPasskeyData = {
    body: {
        userEmail: string;
        attestationObject: string;
        clientDataJSON: string;
    };
    path?: never;
    query?: never;
    url: '/me/passkey';
};

export type AssignPasskeyErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type AssignPasskeyError = AssignPasskeyErrors[keyof AssignPasskeyErrors];

export type AssignPasskeyResponses = {
    /**
     * Passkey created
     */
    200: {
        success: boolean;
    };
};

export type AssignPasskeyResponse = AssignPasskeyResponses[keyof AssignPasskeyResponses];

export type GetUploadTokenData = {
    body?: never;
    path?: never;
    query: {
        public?: string | boolean;
        organizationId?: string;
        templateId: 'avatar' | 'cover' | 'attachment';
    };
    url: '/me/upload-token';
};

export type GetUploadTokenErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetUploadTokenError = GetUploadTokenErrors[keyof GetUploadTokenErrors];

export type GetUploadTokenResponses = {
    /**
     * Upload token with a scope for a user or organization
     */
    200: {
        success: boolean;
        data: {
            public: boolean;
            sub: string;
            s3: boolean;
            signature: string;
            params: {
                auth: {
                    key: string;
                    expires?: string;
                };
                [key: string]: unknown | {
                    key: string;
                    expires?: string;
                };
            };
        };
    };
};

export type GetUploadTokenResponse = GetUploadTokenResponses[keyof GetUploadTokenResponses];

export type UnsubscribeData = {
    body?: never;
    path?: never;
    query: {
        token: string;
    };
    url: '/me/unsubscribe';
};

export type UnsubscribeErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type UnsubscribeError = UnsubscribeErrors[keyof UnsubscribeErrors];

export type DeleteUsersData = {
    body?: {
        ids: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/users';
};

export type DeleteUsersErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type DeleteUsersError = DeleteUsersErrors[keyof DeleteUsersErrors];

export type DeleteUsersResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        errors: Array<{
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        }>;
    };
};

export type DeleteUsersResponse = DeleteUsersResponses[keyof DeleteUsersResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query: {
        q?: string;
        sort?: 'id' | 'name' | 'email' | 'role' | 'createdAt' | 'lastSeenAt' | 'membershipCount';
        order?: 'asc' | 'desc';
        offset: string;
        limit: string;
        role?: 'user' | 'admin';
    };
    url: '/users';
};

export type GetUsersErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
    /**
     * Users
     */
    200: {
        success: boolean;
        data: {
            items: Array<{
                id: string;
                entityType: 'user';
                name: string;
                description: string | null;
                slug: string;
                thumbnailUrl: string | null;
                bannerUrl: string | null;
                email: string;
                firstName: string | null;
                lastName: string | null;
                language: 'en' | 'nl';
                newsletter: boolean;
                role: 'user' | 'admin';
                createdAt: string;
                modifiedAt: string | null;
                lastSeenAt: string | null;
                lastStartedAt: string | null;
                lastSignInAt: string | null;
                modifiedBy: string | null;
            }>;
            total: number;
        };
    };
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type GetUsersByIdOrSlugData = {
    body?: never;
    path: {
        idOrSlug: string;
    };
    query?: never;
    url: '/users/{idOrSlug}';
};

export type GetUsersByIdOrSlugErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetUsersByIdOrSlugError = GetUsersByIdOrSlugErrors[keyof GetUsersByIdOrSlugErrors];

export type GetUsersByIdOrSlugResponses = {
    /**
     * User
     */
    200: {
        success: boolean;
        data: {
            id: string;
            entityType: 'user';
            name: string;
            description: string | null;
            slug: string;
            thumbnailUrl: string | null;
            bannerUrl: string | null;
            email: string;
            firstName: string | null;
            lastName: string | null;
            language: 'en' | 'nl';
            newsletter: boolean;
            role: 'user' | 'admin';
            createdAt: string;
            modifiedAt: string | null;
            lastSeenAt: string | null;
            lastStartedAt: string | null;
            lastSignInAt: string | null;
            modifiedBy: string | null;
        };
    };
};

export type GetUsersByIdOrSlugResponse = GetUsersByIdOrSlugResponses[keyof GetUsersByIdOrSlugResponses];

export type PutUsersByIdOrSlugData = {
    body?: {
        bannerUrl?: string | null;
        firstName?: string | null;
        lastName?: string | null;
        language?: 'en' | 'nl';
        newsletter?: boolean;
        thumbnailUrl?: string | null;
        slug?: string;
    };
    path: {
        idOrSlug: string;
    };
    query?: never;
    url: '/users/{idOrSlug}';
};

export type PutUsersByIdOrSlugErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PutUsersByIdOrSlugError = PutUsersByIdOrSlugErrors[keyof PutUsersByIdOrSlugErrors];

export type PutUsersByIdOrSlugResponses = {
    /**
     * User
     */
    200: {
        success: boolean;
        data: {
            id: string;
            entityType: 'user';
            name: string;
            description: string | null;
            slug: string;
            thumbnailUrl: string | null;
            bannerUrl: string | null;
            email: string;
            firstName: string | null;
            lastName: string | null;
            language: 'en' | 'nl';
            newsletter: boolean;
            role: 'user' | 'admin';
            createdAt: string;
            modifiedAt: string | null;
            lastSeenAt: string | null;
            lastStartedAt: string | null;
            lastSignInAt: string | null;
            modifiedBy: string | null;
        };
    };
};

export type PutUsersByIdOrSlugResponse = PutUsersByIdOrSlugResponses[keyof PutUsersByIdOrSlugResponses];

export type DeleteOrganizationsData = {
    body?: {
        ids: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/organizations';
};

export type DeleteOrganizationsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type DeleteOrganizationsError = DeleteOrganizationsErrors[keyof DeleteOrganizationsErrors];

export type DeleteOrganizationsResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        errors: Array<{
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        }>;
    };
};

export type DeleteOrganizationsResponse = DeleteOrganizationsResponses[keyof DeleteOrganizationsResponses];

export type GetOrganizationsData = {
    body?: never;
    path?: never;
    query: {
        q?: string;
        sort?: 'id' | 'name' | 'userRole' | 'createdAt';
        order?: 'asc' | 'desc';
        offset: string;
        limit: string;
    };
    url: '/organizations';
};

export type GetOrganizationsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetOrganizationsError = GetOrganizationsErrors[keyof GetOrganizationsErrors];

export type GetOrganizationsResponses = {
    /**
     * Organizations
     */
    200: {
        success: boolean;
        data: {
            items: Array<{
                id: string;
                entityType: 'organization';
                name: string;
                description: string | null;
                slug: string;
                thumbnailUrl: string | null;
                bannerUrl: string | null;
                shortName: string | null;
                country: string | null;
                timezone: string | null;
                defaultLanguage: 'en' | 'nl';
                languages: Array<'en' | 'nl'>;
                restrictions: string | number | boolean | null | {
                    [key: string]: unknown;
                } | Array<unknown>;
                notificationEmail: string | null;
                emailDomains: Array<string>;
                color: string | null;
                logoUrl: string | null;
                websiteUrl: string | null;
                welcomeText: string | null;
                authStrategies: Array<string>;
                chatSupport: boolean;
                createdAt: string;
                createdBy: string | null;
                modifiedAt: string | null;
                modifiedBy: string | null;
                membership: {
                    id: string;
                    contextType: 'organization';
                    userId: string;
                    role: 'member' | 'admin';
                    archived: boolean;
                    muted: boolean;
                    order: number;
                    organizationId: string;
                } | null;
                counts: {
                    membership: {
                        admin: number;
                        member: number;
                        pending: number;
                        total: number;
                    };
                    related: {
                        0: number;
                    };
                };
            }>;
            total: number;
        };
    };
};

export type GetOrganizationsResponse = GetOrganizationsResponses[keyof GetOrganizationsResponses];

export type PostOrganizationsData = {
    body: {
        name: string;
        slug: string;
    };
    path?: never;
    query?: never;
    url: '/organizations';
};

export type PostOrganizationsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostOrganizationsError = PostOrganizationsErrors[keyof PostOrganizationsErrors];

export type PostOrganizationsResponses = {
    /**
     * Organization was created
     */
    200: {
        success: boolean;
        data: {
            id: string;
            entityType: 'organization';
            name: string;
            description: string | null;
            slug: string;
            thumbnailUrl: string | null;
            bannerUrl: string | null;
            shortName: string | null;
            country: string | null;
            timezone: string | null;
            defaultLanguage: 'en' | 'nl';
            languages: Array<'en' | 'nl'>;
            restrictions: string | number | boolean | null | {
                [key: string]: unknown;
            } | Array<unknown>;
            notificationEmail: string | null;
            emailDomains: Array<string>;
            color: string | null;
            logoUrl: string | null;
            websiteUrl: string | null;
            welcomeText: string | null;
            authStrategies: Array<string>;
            chatSupport: boolean;
            createdAt: string;
            createdBy: string | null;
            modifiedAt: string | null;
            modifiedBy: string | null;
            membership: {
                id: string;
                contextType: 'organization';
                userId: string;
                role: 'member' | 'admin';
                archived: boolean;
                muted: boolean;
                order: number;
                organizationId: string;
            };
            invitesCount: number;
        };
    };
};

export type PostOrganizationsResponse = PostOrganizationsResponses[keyof PostOrganizationsResponses];

export type GetOrganizationsByIdOrSlugData = {
    body?: never;
    path: {
        idOrSlug: string;
    };
    query?: never;
    url: '/organizations/{idOrSlug}';
};

export type GetOrganizationsByIdOrSlugErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetOrganizationsByIdOrSlugError = GetOrganizationsByIdOrSlugErrors[keyof GetOrganizationsByIdOrSlugErrors];

export type GetOrganizationsByIdOrSlugResponses = {
    /**
     * Organization
     */
    200: {
        success: boolean;
        data: {
            id: string;
            entityType: 'organization';
            name: string;
            description: string | null;
            slug: string;
            thumbnailUrl: string | null;
            bannerUrl: string | null;
            shortName: string | null;
            country: string | null;
            timezone: string | null;
            defaultLanguage: 'en' | 'nl';
            languages: Array<'en' | 'nl'>;
            restrictions: string | number | boolean | null | {
                [key: string]: unknown;
            } | Array<unknown>;
            notificationEmail: string | null;
            emailDomains: Array<string>;
            color: string | null;
            logoUrl: string | null;
            websiteUrl: string | null;
            welcomeText: string | null;
            authStrategies: Array<string>;
            chatSupport: boolean;
            createdAt: string;
            createdBy: string | null;
            modifiedAt: string | null;
            modifiedBy: string | null;
            membership: {
                id: string;
                contextType: 'organization';
                userId: string;
                role: 'member' | 'admin';
                archived: boolean;
                muted: boolean;
                order: number;
                organizationId: string;
            } | null;
            invitesCount: number;
        };
    };
};

export type GetOrganizationsByIdOrSlugResponse = GetOrganizationsByIdOrSlugResponses[keyof GetOrganizationsByIdOrSlugResponses];

export type PutOrganizationsByIdOrSlugData = {
    body?: {
        slug?: string;
        name?: string;
        shortName?: string | null;
        country?: string | null;
        timezone?: string | null;
        defaultLanguage?: 'en' | 'nl';
        languages?: Array<'en' | 'nl'>;
        notificationEmail?: string | null;
        emailDomains?: Array<string>;
        color?: string | null;
        thumbnailUrl?: string | null;
        logoUrl?: string | null;
        bannerUrl?: string | null;
        websiteUrl?: string | null;
        welcomeText?: string | null;
        authStrategies?: Array<string>;
        chatSupport?: boolean;
    };
    path: {
        idOrSlug: string;
    };
    query?: never;
    url: '/organizations/{idOrSlug}';
};

export type PutOrganizationsByIdOrSlugErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PutOrganizationsByIdOrSlugError = PutOrganizationsByIdOrSlugErrors[keyof PutOrganizationsByIdOrSlugErrors];

export type PutOrganizationsByIdOrSlugResponses = {
    /**
     * Organization was updated
     */
    200: {
        success: boolean;
        data: {
            id: string;
            entityType: 'organization';
            name: string;
            description: string | null;
            slug: string;
            thumbnailUrl: string | null;
            bannerUrl: string | null;
            shortName: string | null;
            country: string | null;
            timezone: string | null;
            defaultLanguage: 'en' | 'nl';
            languages: Array<'en' | 'nl'>;
            restrictions: string | number | boolean | null | {
                [key: string]: unknown;
            } | Array<unknown>;
            notificationEmail: string | null;
            emailDomains: Array<string>;
            color: string | null;
            logoUrl: string | null;
            websiteUrl: string | null;
            welcomeText: string | null;
            authStrategies: Array<string>;
            chatSupport: boolean;
            createdAt: string;
            createdBy: string | null;
            modifiedAt: string | null;
            modifiedBy: string | null;
            membership: {
                id: string;
                contextType: 'organization';
                userId: string;
                role: 'member' | 'admin';
                archived: boolean;
                muted: boolean;
                order: number;
                organizationId: string;
            } | null;
            invitesCount: number;
        };
    };
};

export type PutOrganizationsByIdOrSlugResponse = PutOrganizationsByIdOrSlugResponses[keyof PutOrganizationsByIdOrSlugResponses];

export type GetEntitiesPageData = {
    body?: never;
    path?: never;
    query?: {
        q?: string;
        targetUserId?: string;
        type?: 'user' | 'organization';
        targetOrgId?: string;
        userMembershipType?: 'organization';
    };
    url: '/entities/page';
};

export type GetEntitiesPageErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetEntitiesPageError = GetEntitiesPageErrors[keyof GetEntitiesPageErrors];

export type GetEntitiesPageResponses = {
    /**
     * Page entities
     */
    200: {
        success: boolean;
        data: {
            items: Array<{
                id: string;
                entityType: 'user' | 'organization';
                slug: string;
                name: string;
                thumbnailUrl?: string | null;
                bannerUrl?: string | null;
                email?: string;
                membership: {
                    id: string;
                    contextType: 'organization';
                    userId: string;
                    role: 'member' | 'admin';
                    archived: boolean;
                    muted: boolean;
                    order: number;
                    organizationId: string;
                } | null;
            }>;
            counts: {
                user?: number;
                organization?: number;
            };
            total: number;
        };
    };
};

export type GetEntitiesPageResponse = GetEntitiesPageResponses[keyof GetEntitiesPageResponses];

export type GetEntitiesContextData = {
    body?: never;
    path?: never;
    query: {
        q?: string;
        targetUserId?: string;
        type: 'organization';
        sort?: 'name' | 'createdAt';
    };
    url: '/entities/context';
};

export type GetEntitiesContextErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetEntitiesContextError = GetEntitiesContextErrors[keyof GetEntitiesContextErrors];

export type GetEntitiesContextResponses = {
    /**
     * Context entities
     */
    200: {
        success: boolean;
        data: Array<{
            id: string;
            entityType: 'organization';
            slug: string;
            name: string;
            thumbnailUrl?: string | null;
            bannerUrl?: string | null;
            createdAt: string;
            membership: {
                id: string;
                contextType: 'organization';
                userId: string;
                role: 'member' | 'admin';
                archived: boolean;
                muted: boolean;
                order: number;
                organizationId: string;
            };
            members: Array<{
                [key: string]: unknown;
            }>;
        }>;
    };
};

export type GetEntitiesContextResponse = GetEntitiesContextResponses[keyof GetEntitiesContextResponses];

export type PostEntitiesCheckSlugData = {
    body?: {
        slug: string;
    };
    path?: never;
    query?: never;
    url: '/entities/check-slug';
};

export type PostEntitiesCheckSlugErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostEntitiesCheckSlugError = PostEntitiesCheckSlugErrors[keyof PostEntitiesCheckSlugErrors];

export type PostEntitiesCheckSlugResponses = {
    /**
     * Slug is available
     */
    200: {
        success: boolean;
    };
};

export type PostEntitiesCheckSlugResponse = PostEntitiesCheckSlugResponses[keyof PostEntitiesCheckSlugResponses];

export type PostSystemInviteData = {
    body?: {
        emails: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/system/invite';
};

export type PostSystemInviteErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostSystemInviteError = PostSystemInviteErrors[keyof PostSystemInviteErrors];

export type PostSystemInviteResponses = {
    /**
     * Invitations are sent
     */
    200: {
        success: boolean;
    };
};

export type PostSystemInviteResponse = PostSystemInviteResponses[keyof PostSystemInviteResponses];

export type GetSystemPresignedUrlData = {
    body?: never;
    path?: never;
    query: {
        key: string;
    };
    url: '/system/presigned-url';
};

export type GetSystemPresignedUrlErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetSystemPresignedUrlError = GetSystemPresignedUrlErrors[keyof GetSystemPresignedUrlErrors];

export type GetSystemPresignedUrlResponses = {
    /**
     * Presigned URL
     */
    200: {
        success: boolean;
        data: string;
    };
};

export type GetSystemPresignedUrlResponse = GetSystemPresignedUrlResponses[keyof GetSystemPresignedUrlResponses];

export type PostSystemPaddleWebhookData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/system/paddle-webhook';
};

export type PostSystemPaddleWebhookErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostSystemPaddleWebhookError = PostSystemPaddleWebhookErrors[keyof PostSystemPaddleWebhookErrors];

export type PostSystemPaddleWebhookResponses = {
    /**
     * Paddle webhook received
     */
    200: {
        success: boolean;
    };
};

export type PostSystemPaddleWebhookResponse = PostSystemPaddleWebhookResponses[keyof PostSystemPaddleWebhookResponses];

export type PostSystemNewsletterData = {
    body: {
        organizationIds: Array<string>;
        roles: Array<'member' | 'admin'>;
        subject: string;
        content: string;
    };
    path?: never;
    query?: {
        toSelf?: string | boolean;
    };
    url: '/system/newsletter';
};

export type PostSystemNewsletterErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostSystemNewsletterError = PostSystemNewsletterErrors[keyof PostSystemNewsletterErrors];

export type PostSystemNewsletterResponses = {
    /**
     * Organization
     */
    200: {
        success: boolean;
    };
};

export type PostSystemNewsletterResponse = PostSystemNewsletterResponses[keyof PostSystemNewsletterResponses];

export type DeleteRequestsData = {
    body?: {
        ids: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/requests';
};

export type DeleteRequestsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type DeleteRequestsError = DeleteRequestsErrors[keyof DeleteRequestsErrors];

export type DeleteRequestsResponses = {
    /**
     * Requests
     */
    200: {
        success: boolean;
    };
};

export type DeleteRequestsResponse = DeleteRequestsResponses[keyof DeleteRequestsResponses];

export type GetRequestsData = {
    body?: never;
    path?: never;
    query: {
        q?: string;
        sort?: 'id' | 'email' | 'type' | 'createdAt';
        order?: 'asc' | 'desc';
        offset: string;
        limit: string;
    };
    url: '/requests';
};

export type GetRequestsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetRequestsError = GetRequestsErrors[keyof GetRequestsErrors];

export type GetRequestsResponses = {
    /**
     * Requests
     */
    200: {
        success: boolean;
        data: {
            items: Array<{
                id: string;
                message: string | null;
                email: string;
                type: 'waitlist' | 'newsletter' | 'contact';
                createdAt: string;
                wasInvited: boolean;
            }>;
            total: number;
        };
    };
};

export type GetRequestsResponse = GetRequestsResponses[keyof GetRequestsResponses];

export type PostRequestsData = {
    body?: {
        email: string;
        type: 'waitlist' | 'newsletter' | 'contact';
        message: string | null;
    };
    path?: never;
    query?: never;
    url: '/requests';
};

export type PostRequestsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostRequestsError = PostRequestsErrors[keyof PostRequestsErrors];

export type PostRequestsResponses = {
    /**
     * Requests
     */
    200: {
        success: boolean;
        data: {
            id: string;
            message: string | null;
            email: string;
            type: 'waitlist' | 'newsletter' | 'contact';
            createdAt: string;
            wasInvited: boolean;
        };
    };
};

export type PostRequestsResponse = PostRequestsResponses[keyof PostRequestsResponses];

export type GetMetricsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/metrics';
};

export type GetMetricsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetMetricsError = GetMetricsErrors[keyof GetMetricsErrors];

export type GetMetricsResponses = {
    /**
     * Metrics
     */
    200: {
        success: boolean;
        data: Array<{
            date: string;
            count: number;
        }>;
    };
};

export type GetMetricsResponse = GetMetricsResponses[keyof GetMetricsResponses];

export type GetMetricsPublicData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/metrics/public';
};

export type GetMetricsPublicErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetMetricsPublicError = GetMetricsPublicErrors[keyof GetMetricsPublicErrors];

export type GetMetricsPublicResponses = {
    /**
     * Public counts
     */
    200: {
        success: boolean;
        data: {
            0: number;
            1: number;
            2: number;
        };
    };
};

export type GetMetricsPublicResponse = GetMetricsPublicResponses[keyof GetMetricsPublicResponses];

export type GetByOrgIdOrSlugAttachmentsShapeProxyData = {
    body?: never;
    path: {
        orgIdOrSlug: string;
    };
    query?: never;
    url: '/{orgIdOrSlug}/attachments/shape-proxy';
};

export type GetByOrgIdOrSlugAttachmentsShapeProxyErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetByOrgIdOrSlugAttachmentsShapeProxyError = GetByOrgIdOrSlugAttachmentsShapeProxyErrors[keyof GetByOrgIdOrSlugAttachmentsShapeProxyErrors];

export type GetByOrgIdOrSlugAttachmentsShapeProxyResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type DeleteByOrgIdOrSlugAttachmentsData = {
    body?: {
        ids: Array<string>;
    };
    path: {
        orgIdOrSlug: string;
    };
    query?: never;
    url: '/{orgIdOrSlug}/attachments';
};

export type DeleteByOrgIdOrSlugAttachmentsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type DeleteByOrgIdOrSlugAttachmentsError = DeleteByOrgIdOrSlugAttachmentsErrors[keyof DeleteByOrgIdOrSlugAttachmentsErrors];

export type DeleteByOrgIdOrSlugAttachmentsResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        errors: Array<{
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        }>;
    };
};

export type DeleteByOrgIdOrSlugAttachmentsResponse = DeleteByOrgIdOrSlugAttachmentsResponses[keyof DeleteByOrgIdOrSlugAttachmentsResponses];

export type GetByOrgIdOrSlugAttachmentsData = {
    body?: never;
    path: {
        orgIdOrSlug: string;
    };
    query: {
        q?: string;
        sort?: 'id' | 'filename' | 'contentType' | 'createdAt';
        order?: 'asc' | 'desc';
        offset: string;
        limit: string;
        attachmentId?: string;
    };
    url: '/{orgIdOrSlug}/attachments';
};

export type GetByOrgIdOrSlugAttachmentsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetByOrgIdOrSlugAttachmentsError = GetByOrgIdOrSlugAttachmentsErrors[keyof GetByOrgIdOrSlugAttachmentsErrors];

export type GetByOrgIdOrSlugAttachmentsResponses = {
    /**
     * Attachments
     */
    200: {
        success: boolean;
        data: {
            items: Array<{
                id: string;
                name: string;
                entityType: 'attachment';
                groupId: string | null;
                filename: string;
                contentType: string;
                convertedContentType: string | null;
                size: string;
                createdAt: string;
                createdBy: string | null;
                modifiedAt: string | null;
                modifiedBy: string | null;
                organizationId: string;
                url: string;
                thumbnailUrl: string | null;
                convertedUrl: string | null;
            }>;
            total: number;
        };
    };
};

export type GetByOrgIdOrSlugAttachmentsResponse = GetByOrgIdOrSlugAttachmentsResponses[keyof GetByOrgIdOrSlugAttachmentsResponses];

export type PostByOrgIdOrSlugAttachmentsData = {
    body: Array<{
        id?: string;
        groupId?: string | null;
        filename: string;
        contentType: string;
        convertedContentType?: string | null;
        size: string;
        originalKey: string;
        convertedKey?: string | null;
        thumbnailKey?: string | null;
        organizationId: string;
    }>;
    path: {
        orgIdOrSlug: string;
    };
    query?: never;
    url: '/{orgIdOrSlug}/attachments';
};

export type PostByOrgIdOrSlugAttachmentsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostByOrgIdOrSlugAttachmentsError = PostByOrgIdOrSlugAttachmentsErrors[keyof PostByOrgIdOrSlugAttachmentsErrors];

export type PostByOrgIdOrSlugAttachmentsResponses = {
    /**
     * Attachment
     */
    200: {
        success: boolean;
        data: Array<{
            id: string;
            name: string;
            entityType: 'attachment';
            groupId: string | null;
            filename: string;
            contentType: string;
            convertedContentType: string | null;
            size: string;
            createdAt: string;
            createdBy: string | null;
            modifiedAt: string | null;
            modifiedBy: string | null;
            organizationId: string;
            url: string;
            thumbnailUrl: string | null;
            convertedUrl: string | null;
        }>;
    };
};

export type PostByOrgIdOrSlugAttachmentsResponse = PostByOrgIdOrSlugAttachmentsResponses[keyof PostByOrgIdOrSlugAttachmentsResponses];

export type GetByOrgIdOrSlugAttachmentsByIdData = {
    body?: never;
    path: {
        id: string;
        orgIdOrSlug: string;
    };
    query?: never;
    url: '/{orgIdOrSlug}/attachments/{id}';
};

export type GetByOrgIdOrSlugAttachmentsByIdErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetByOrgIdOrSlugAttachmentsByIdError = GetByOrgIdOrSlugAttachmentsByIdErrors[keyof GetByOrgIdOrSlugAttachmentsByIdErrors];

export type GetByOrgIdOrSlugAttachmentsByIdResponses = {
    /**
     * Attachment
     */
    200: {
        success: boolean;
        data: {
            id: string;
            name: string;
            entityType: 'attachment';
            groupId: string | null;
            filename: string;
            contentType: string;
            convertedContentType: string | null;
            size: string;
            createdAt: string;
            createdBy: string | null;
            modifiedAt: string | null;
            modifiedBy: string | null;
            organizationId: string;
            url: string;
            thumbnailUrl: string | null;
            convertedUrl: string | null;
        };
    };
};

export type GetByOrgIdOrSlugAttachmentsByIdResponse = GetByOrgIdOrSlugAttachmentsByIdResponses[keyof GetByOrgIdOrSlugAttachmentsByIdResponses];

export type PutByOrgIdOrSlugAttachmentsByIdData = {
    body?: {
        name?: string;
        originalKey?: string;
    };
    path: {
        id: string;
        orgIdOrSlug: string;
    };
    query?: never;
    url: '/{orgIdOrSlug}/attachments/{id}';
};

export type PutByOrgIdOrSlugAttachmentsByIdErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PutByOrgIdOrSlugAttachmentsByIdError = PutByOrgIdOrSlugAttachmentsByIdErrors[keyof PutByOrgIdOrSlugAttachmentsByIdErrors];

export type PutByOrgIdOrSlugAttachmentsByIdResponses = {
    /**
     * Attachment was updated
     */
    200: {
        success: boolean;
        data: {
            id: string;
            name: string;
            entityType: 'attachment';
            groupId: string | null;
            filename: string;
            contentType: string;
            convertedContentType: string | null;
            size: string;
            createdAt: string;
            createdBy: string | null;
            modifiedAt: string | null;
            modifiedBy: string | null;
            organizationId: string;
            url: string;
            thumbnailUrl: string | null;
            convertedUrl: string | null;
        };
    };
};

export type PutByOrgIdOrSlugAttachmentsByIdResponse = PutByOrgIdOrSlugAttachmentsByIdResponses[keyof PutByOrgIdOrSlugAttachmentsByIdResponses];

export type GetByOrgIdOrSlugAttachmentsByIdCoverData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/{orgIdOrSlug}/attachments/{id}/cover';
};

export type GetByOrgIdOrSlugAttachmentsByIdCoverErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetByOrgIdOrSlugAttachmentsByIdCoverError = GetByOrgIdOrSlugAttachmentsByIdCoverErrors[keyof GetByOrgIdOrSlugAttachmentsByIdCoverErrors];

export type GetByOrgIdOrSlugAttachmentsByIdCoverResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetByOrgIdOrSlugAttachmentsByIdLinkData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/{orgIdOrSlug}/attachments/{id}/link';
};

export type GetByOrgIdOrSlugAttachmentsByIdLinkErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetByOrgIdOrSlugAttachmentsByIdLinkError = GetByOrgIdOrSlugAttachmentsByIdLinkErrors[keyof GetByOrgIdOrSlugAttachmentsByIdLinkErrors];

export type GetByOrgIdOrSlugAttachmentsByIdLinkResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type DeleteByOrgIdOrSlugMembershipsData = {
    body?: {
        ids: Array<string>;
    };
    path: {
        orgIdOrSlug: string;
    };
    query: {
        idOrSlug: string;
        entityType: 'organization';
    };
    url: '/{orgIdOrSlug}/memberships';
};

export type DeleteByOrgIdOrSlugMembershipsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type DeleteByOrgIdOrSlugMembershipsError = DeleteByOrgIdOrSlugMembershipsErrors[keyof DeleteByOrgIdOrSlugMembershipsErrors];

export type DeleteByOrgIdOrSlugMembershipsResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        errors: Array<{
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        }>;
    };
};

export type DeleteByOrgIdOrSlugMembershipsResponse = DeleteByOrgIdOrSlugMembershipsResponses[keyof DeleteByOrgIdOrSlugMembershipsResponses];

export type PostByOrgIdOrSlugMembershipsData = {
    body?: {
        emails: Array<string>;
        role: 'member' | 'admin';
    };
    path: {
        orgIdOrSlug: string;
    };
    query: {
        idOrSlug: string;
        entityType: 'organization';
    };
    url: '/{orgIdOrSlug}/memberships';
};

export type PostByOrgIdOrSlugMembershipsErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PostByOrgIdOrSlugMembershipsError = PostByOrgIdOrSlugMembershipsErrors[keyof PostByOrgIdOrSlugMembershipsErrors];

export type PostByOrgIdOrSlugMembershipsResponses = {
    /**
     * Invitation was sent
     */
    200: {
        success: boolean;
    };
};

export type PostByOrgIdOrSlugMembershipsResponse = PostByOrgIdOrSlugMembershipsResponses[keyof PostByOrgIdOrSlugMembershipsResponses];

export type PutByOrgIdOrSlugMembershipsByIdData = {
    body?: {
        role?: 'member' | 'admin';
        muted?: boolean;
        archived?: boolean;
        order?: number;
    };
    path: {
        id: string;
        orgIdOrSlug: string;
    };
    query?: never;
    url: '/{orgIdOrSlug}/memberships/{id}';
};

export type PutByOrgIdOrSlugMembershipsByIdErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type PutByOrgIdOrSlugMembershipsByIdError = PutByOrgIdOrSlugMembershipsByIdErrors[keyof PutByOrgIdOrSlugMembershipsByIdErrors];

export type PutByOrgIdOrSlugMembershipsByIdResponses = {
    /**
     * Membership updated
     */
    200: {
        success: boolean;
        data: {
            id: string;
            contextType: 'organization';
            userId: string;
            role: 'member' | 'admin';
            createdAt: string;
            createdBy: string | null;
            modifiedAt: string | null;
            modifiedBy: string | null;
            archived: boolean;
            muted: boolean;
            order: number;
            organizationId: string;
        };
    };
};

export type PutByOrgIdOrSlugMembershipsByIdResponse = PutByOrgIdOrSlugMembershipsByIdResponses[keyof PutByOrgIdOrSlugMembershipsByIdResponses];

export type GetByOrgIdOrSlugMembershipsMembersData = {
    body?: never;
    path?: {
        orgIdOrSlug?: string;
    };
    query: {
        q?: string;
        sort?: 'id' | 'name' | 'email' | 'role' | 'createdAt' | 'lastSeenAt';
        order?: 'asc' | 'desc';
        offset: string;
        limit: string;
        idOrSlug: string;
        entityType: 'organization';
        role?: 'member' | 'admin';
    };
    url: '/{orgIdOrSlug}/memberships/members';
};

export type GetByOrgIdOrSlugMembershipsMembersErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetByOrgIdOrSlugMembershipsMembersError = GetByOrgIdOrSlugMembershipsMembersErrors[keyof GetByOrgIdOrSlugMembershipsMembersErrors];

export type GetByOrgIdOrSlugMembershipsMembersResponses = {
    /**
     * Members
     */
    200: {
        success: boolean;
        data: {
            items: Array<{
                id: string;
                entityType: 'user';
                name: string;
                description: string | null;
                slug: string;
                thumbnailUrl: string | null;
                bannerUrl: string | null;
                email: string;
                firstName: string | null;
                lastName: string | null;
                language: 'en' | 'nl';
                newsletter: boolean;
                role: 'user' | 'admin';
                createdAt: string;
                modifiedAt: string | null;
                lastSeenAt: string | null;
                lastStartedAt: string | null;
                lastSignInAt: string | null;
                modifiedBy: string | null;
                membership: {
                    id: string;
                    contextType: 'organization';
                    userId: string;
                    role: 'member' | 'admin';
                    archived: boolean;
                    muted: boolean;
                    order: number;
                    organizationId: string;
                };
            }>;
            total: number;
        };
    };
};

export type GetByOrgIdOrSlugMembershipsMembersResponse = GetByOrgIdOrSlugMembershipsMembersResponses[keyof GetByOrgIdOrSlugMembershipsMembersResponses];

export type GetByOrgIdOrSlugMembershipsPendingData = {
    body?: never;
    path: {
        orgIdOrSlug: string;
    };
    query: {
        q?: string;
        sort?: 'email' | 'role' | 'expiresAt' | 'createdAt' | 'createdBy';
        order?: 'asc' | 'desc';
        offset: string;
        limit: string;
        idOrSlug: string;
        entityType: 'organization';
    };
    url: '/{orgIdOrSlug}/memberships/pending';
};

export type GetByOrgIdOrSlugMembershipsPendingErrors = {
    /**
     * Bad request: problem processing request.
     */
    400: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Unauthorized: authentication required.
     */
    401: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Forbidden: insufficient permissions.
     */
    403: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Not found: resource does not exist.
     */
    404: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
    /**
     * Rate limit: too many requests.
     */
    429: {
        success?: boolean;
        error: {
            message: string;
            type: string;
            status: number;
            severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
            entityType?: 'user' | 'organization' | 'attachment';
            logId?: string;
            path?: string;
            method?: string;
            timestamp?: string;
            usr?: string;
            org?: string;
        };
    };
};

export type GetByOrgIdOrSlugMembershipsPendingError = GetByOrgIdOrSlugMembershipsPendingErrors[keyof GetByOrgIdOrSlugMembershipsPendingErrors];

export type GetByOrgIdOrSlugMembershipsPendingResponses = {
    /**
     * Invited members
     */
    200: {
        success: boolean;
        data: {
            items: Array<{
                id: string;
                email: string;
                role: 'member' | 'admin';
                createdAt: string;
                createdBy: string | null;
                expiresAt: string;
                name: string | null;
            }>;
            total: number;
        };
    };
};

export type GetByOrgIdOrSlugMembershipsPendingResponse = GetByOrgIdOrSlugMembershipsPendingResponses[keyof GetByOrgIdOrSlugMembershipsPendingResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:4000' | (string & {});
};