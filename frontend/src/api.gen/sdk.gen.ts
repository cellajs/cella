// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  AcceptEntityInviteData,
  AcceptEntityInviteErrors,
  AcceptEntityInviteResponses,
  CheckEmailData,
  CheckEmailErrors,
  CheckEmailResponses,
  CheckSlugData,
  CheckSlugErrors,
  CheckSlugResponses,
  CheckTokenData,
  CheckTokenErrors,
  CheckTokenResponses,
  CreateAttachmentData,
  CreateAttachmentErrors,
  CreateAttachmentResponses,
  CreateOrganizationData,
  CreateOrganizationErrors,
  CreateOrganizationResponses,
  CreatePasskeyData,
  CreatePasskeyErrors,
  CreatePasskeyResponses,
  CreatePasswordData,
  CreatePasswordErrors,
  CreatePasswordResponses,
  CreateRequestData,
  CreateRequestErrors,
  CreateRequestResponses,
  DeleteAttachmentsData,
  DeleteAttachmentsErrors,
  DeleteAttachmentsResponses,
  DeleteMeData,
  DeleteMeErrors,
  DeleteMembershipsData,
  DeleteMembershipsErrors,
  DeleteMembershipsResponses,
  DeleteMeResponses,
  DeleteMyMembershipData,
  DeleteMyMembershipErrors,
  DeleteMyMembershipResponses,
  DeleteOrganizationsData,
  DeleteOrganizationsErrors,
  DeleteOrganizationsResponses,
  DeletePasskeyData,
  DeletePasskeyErrors,
  DeletePasskeyResponses,
  DeleteRequestsData,
  DeleteRequestsErrors,
  DeleteRequestsResponses,
  DeleteSessionsData,
  DeleteSessionsErrors,
  DeleteSessionsResponses,
  DeleteUsersData,
  DeleteUsersErrors,
  DeleteUsersResponses,
  GetAttachmentCoverData,
  GetAttachmentCoverErrors,
  GetAttachmentCoverResponses,
  GetAttachmentData,
  GetAttachmentErrors,
  GetAttachmentResponses,
  GetAttachmentsData,
  GetAttachmentsErrors,
  GetAttachmentsResponses,
  GetEntitiesWithAdminsData,
  GetEntitiesWithAdminsErrors,
  GetEntitiesWithAdminsResponses,
  GetMeData,
  GetMeErrors,
  GetMembersData,
  GetMembersErrors,
  GetMembersResponses,
  GetMeResponses,
  GetMetricsData,
  GetMetricsErrors,
  GetMetricsResponses,
  GetMyAuthData,
  GetMyAuthErrors,
  GetMyAuthResponses,
  GetMyMenuData,
  GetMyMenuErrors,
  GetMyMenuResponses,
  GetOrganizationData,
  GetOrganizationErrors,
  GetOrganizationResponses,
  GetOrganizationsData,
  GetOrganizationsErrors,
  GetOrganizationsResponses,
  GetPageEntitiesData,
  GetPageEntitiesErrors,
  GetPageEntitiesResponses,
  GetPasskeyChallengeData,
  GetPasskeyChallengeErrors,
  GetPasskeyChallengeResponses,
  GetPendingInvitationsData,
  GetPendingInvitationsErrors,
  GetPendingInvitationsResponses,
  GetPresignedUrlData,
  GetPresignedUrlErrors,
  GetPresignedUrlResponses,
  GetPublicCountsData,
  GetPublicCountsErrors,
  GetPublicCountsResponses,
  GetRequestsData,
  GetRequestsErrors,
  GetRequestsResponses,
  GetUploadTokenData,
  GetUploadTokenErrors,
  GetUploadTokenResponses,
  GetUserData,
  GetUserErrors,
  GetUserResponses,
  GetUsersData,
  GetUsersErrors,
  GetUsersResponses,
  GithubSignInCallbackData,
  GithubSignInCallbackErrors,
  GithubSignInData,
  GithubSignInErrors,
  GoogleSignInCallbackData,
  GoogleSignInCallbackErrors,
  GoogleSignInData,
  GoogleSignInErrors,
  MembershipInviteData,
  MembershipInviteErrors,
  MembershipInviteResponses,
  MicrosoftSignInCallbackData,
  MicrosoftSignInCallbackErrors,
  MicrosoftSignInData,
  MicrosoftSignInErrors,
  PaddleWebhookData,
  PaddleWebhookErrors,
  PaddleWebhookResponses,
  RedirectToAttachmentData,
  RedirectToAttachmentErrors,
  RedirectToAttachmentResponses,
  RequestPasswordData,
  RequestPasswordErrors,
  RequestPasswordResponses,
  SendNewsletterData,
  SendNewsletterErrors,
  SendNewsletterResponses,
  SendVerificationEmailData,
  SendVerificationEmailErrors,
  SendVerificationEmailResponses,
  ShapeProxyData,
  ShapeProxyErrors,
  ShapeProxyResponses,
  SignInData,
  SignInErrors,
  SignInResponses,
  SignInWithPasskeyData,
  SignInWithPasskeyErrors,
  SignInWithPasskeyResponses,
  SignOutData,
  SignOutErrors,
  SignOutResponses,
  SignUpData,
  SignUpErrors,
  SignUpResponses,
  SignUpWithTokenData,
  SignUpWithTokenErrors,
  SignUpWithTokenResponses,
  StartImpersonationData,
  StartImpersonationErrors,
  StartImpersonationResponses,
  StopImpersonationData,
  StopImpersonationErrors,
  StopImpersonationResponses,
  SystemInviteData,
  SystemInviteErrors,
  SystemInviteResponses,
  UnsubscribeMeData,
  UnsubscribeMeErrors,
  UpdateAttachmentData,
  UpdateAttachmentErrors,
  UpdateAttachmentResponses,
  UpdateMeData,
  UpdateMeErrors,
  UpdateMembershipData,
  UpdateMembershipErrors,
  UpdateMembershipResponses,
  UpdateMeResponses,
  UpdateOrganizationData,
  UpdateOrganizationErrors,
  UpdateOrganizationResponses,
  UpdateUserData,
  UpdateUserErrors,
  UpdateUserResponses,
  VerifyEmailData,
  VerifyEmailErrors,
  VerifyEmailResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Check if email exists
 * üåê Public access.
 *
 * Checks if a user with the specified email address exists in the system.
 */
export const checkEmail = <ThrowOnError extends boolean = true>(options?: Options<CheckEmailData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CheckEmailResponses, CheckEmailErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/check-email',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Sign up with password
 * üåê Public access.
 *
 * Registers a new user using an email and password. Sends a verification email upon successful sign up.
 */
export const signUp = <ThrowOnError extends boolean = true>(options?: Options<SignUpData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SignUpResponses, SignUpErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/sign-up',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Sign up to accept invite
 * üåê Public access.
 *
 * Registers a user using an email and password in response to a system or organization invitation.
 */
export const signUpWithToken = <ThrowOnError extends boolean = true>(options: Options<SignUpWithTokenData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<SignUpWithTokenResponses, SignUpWithTokenErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/sign-up/{token}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Resend verification email
 * üåê Public access.
 *
 * Resends the email verification message to a user using the provided token ID.
 */
export const sendVerificationEmail = <ThrowOnError extends boolean = true>(options?: Options<SendVerificationEmailData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SendVerificationEmailResponses, SendVerificationEmailErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/send-verification-email',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Verify email by token
 * üåê Public access.
 *
 * Verifies a user's email using a token from their verification email. Grants a session upon success.
 */
export const verifyEmail = <ThrowOnError extends boolean = true>(options: Options<VerifyEmailData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<VerifyEmailResponses, VerifyEmailErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/verify-email/{token}',
    ...options,
  });
};

/**
 * Request new password
 * üåê Public access.
 *
 * Sends an email with a link to reset the user's password.
 */
export const requestPassword = <ThrowOnError extends boolean = true>(options?: Options<RequestPasswordData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<RequestPasswordResponses, RequestPasswordErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/request-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create password by token
 * üåê Public access.
 *
 * Sets a new password using a token and grants a session immediately upon success.
 */
export const createPassword = <ThrowOnError extends boolean = true>(options: Options<CreatePasswordData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreatePasswordResponses, CreatePasswordErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/create-password/{token}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Sign in with password
 * üåê Public access.
 *
 * Authenticates an existing user using their email and password.
 */
export const signIn = <ThrowOnError extends boolean = true>(options?: Options<SignInData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SignInResponses, SignInErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/sign-in',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Token validation check
 * üåê Public access.
 *
 * Checks if a token (e.g. for password reset, email verification, or invite) is still valid.
 */
export const checkToken = <ThrowOnError extends boolean = true>(options: Options<CheckTokenData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CheckTokenResponses, CheckTokenErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/check-token/{id}',
    ...options,
  });
};

/**
 * Accept invitation
 * üõ°Ô∏è Requires authentication.
 *
 * Accepts an invitation token and activates the associated membership or system access.
 */
export const acceptEntityInvite = <ThrowOnError extends boolean = true>(options: Options<AcceptEntityInviteData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AcceptEntityInviteResponses, AcceptEntityInviteErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/accept-invite/{token}',
    ...options,
  });
};

/**
 * Start impersonating
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Allows a system admin to impersonate a specific user by ID, returning a temporary impersonation session.
 */
export const startImpersonation = <ThrowOnError extends boolean = true>(options: Options<StartImpersonationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<StartImpersonationResponses, StartImpersonationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/impersonation/start',
    ...options,
  });
};

/**
 * Stop impersonating
 * üåê Public access.
 *
 * Ends impersonation by clearing the current impersonation session and restoring the admin context.
 */
export const stopImpersonation = <ThrowOnError extends boolean = true>(options?: Options<StopImpersonationData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<StopImpersonationResponses, StopImpersonationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/impersonation/stop',
    ...options,
  });
};

/**
 * Sign out
 * üåê Public access.
 *
 * Signs out the *current user* and clears the active session.
 */
export const signOut = <ThrowOnError extends boolean = true>(options?: Options<SignOutData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<SignOutResponses, SignOutErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/sign-out',
    ...options,
  });
};

/**
 * Authenticate with GitHub
 * üåê Public access.
 *
 * Starts OAuth authentication with GitHub. Supports account connection (`connect`), redirect (`redirect`), or invite token (`token`).
 */
export const githubSignIn = <ThrowOnError extends boolean = true>(options: Options<GithubSignInData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, GithubSignInErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/github',
    ...options,
  });
};

/**
 * Authenticate with Google
 * üåê Public access.
 *
 * Starts OAuth authentication with Google. Supports account connection (`connect`), redirect (`redirect`), or invite token (`token`).
 */
export const googleSignIn = <ThrowOnError extends boolean = true>(options: Options<GoogleSignInData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, GoogleSignInErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/google',
    ...options,
  });
};

/**
 * Authenticate with Microsoft
 * üåê Public access.
 *
 * Starts OAuth authentication with Microsoft. Supports account connection (`connect`), redirect (`redirect`), or invite token (`token`).
 */
export const microsoftSignIn = <ThrowOnError extends boolean = true>(options: Options<MicrosoftSignInData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, MicrosoftSignInErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/microsoft',
    ...options,
  });
};

/**
 * Callback for GitHub
 * üåê Public access.
 *
 * Handles GitHub OAuth callback, retrieves user identity, and establishes a session or links account.
 */
export const githubSignInCallback = <ThrowOnError extends boolean = true>(options: Options<GithubSignInCallbackData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, GithubSignInCallbackErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/github/callback',
    ...options,
  });
};

/**
 * Callback for Google
 * üåê Public access.
 *
 * Handles Google OAuth callback, retrieves user identity, and establishes a session or links account.
 */
export const googleSignInCallback = <ThrowOnError extends boolean = true>(options: Options<GoogleSignInCallbackData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, GoogleSignInCallbackErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/google/callback',
    ...options,
  });
};

/**
 * Callback for Microsoft
 * üåê Public access.
 *
 * Handles Microsoft OAuth callback, retrieves user identity, and establishes a session or links account.
 */
export const microsoftSignInCallback = <ThrowOnError extends boolean = true>(options: Options<MicrosoftSignInCallbackData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, MicrosoftSignInCallbackErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/microsoft/callback',
    ...options,
  });
};

/**
 * Get passkey challenge
 * üåê Public access.
 *
 * Initiates the passkey registration or authentication flow by generating a device bound challenge.
 */
export const getPasskeyChallenge = <ThrowOnError extends boolean = true>(options?: Options<GetPasskeyChallengeData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetPasskeyChallengeResponses, GetPasskeyChallengeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/passkey-challenge',
    ...options,
  });
};

/**
 * Verify passkey
 * üåê Public access.
 *
 * Validates the signed challenge and completes passkey based authentication.
 */
export const signInWithPasskey = <ThrowOnError extends boolean = true>(options?: Options<SignInWithPasskeyData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SignInWithPasskeyResponses, SignInWithPasskeyErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/passkey-verification',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete self
 * üõ°Ô∏è Requires authentication.
 *
 * Deletes the *current user*. This also removes the user's memberships (cascade) and sets references to the user to `null` where applicable.
 */
export const deleteMe = <ThrowOnError extends boolean = true>(options?: Options<DeleteMeData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteMeResponses, DeleteMeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me',
    ...options,
  });
};

/**
 * Get self
 * üõ°Ô∏è Requires authentication.
 *
 * Returns the *current user*.
 */
export const getMe = <ThrowOnError extends boolean = true>(options?: Options<GetMeData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMeResponses, GetMeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me',
    ...options,
  });
};

/**
 * Update self
 * üõ°Ô∏è Requires authentication.
 *
 * Updates the *current user*.
 */
export const updateMe = <ThrowOnError extends boolean = true>(options?: Options<UpdateMeData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).put<UpdateMeResponses, UpdateMeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get authentication data
 * üõ°Ô∏è Requires authentication.
 *
 * Returns the authentication related date of the *current user*, including sessions, OAuth accounts, and sign in options.
 */
export const getMyAuth = <ThrowOnError extends boolean = true>(options?: Options<GetMyAuthData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMyAuthResponses, GetMyAuthErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/auth',
    ...options,
  });
};

/**
 * Get menu
 * üõ°Ô∏è Requires authentication.
 *
 * Returns a structured list of contextual entities the *current user* is a member of, grouped by the entity type and enriched with both `memebrship` and `entity` data.
 */
export const getMyMenu = <ThrowOnError extends boolean = true>(options?: Options<GetMyMenuData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMyMenuResponses, GetMyMenuErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/menu',
    ...options,
  });
};

/**
 * Terminate sessions
 * üõ°Ô∏è Requires authentication.
 *
 * Ends one or more sessions for the *current user* based on provided session IDs.
 */
export const deleteSessions = <ThrowOnError extends boolean = true>(options?: Options<DeleteSessionsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteSessionsResponses, DeleteSessionsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/sessions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Leave entity
 * üõ°Ô∏è Requires authentication.
 *
 * Removes the *current user* from an entity they are a member of.
 */
export const deleteMyMembership = <ThrowOnError extends boolean = true>(options: Options<DeleteMyMembershipData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteMyMembershipResponses, DeleteMyMembershipErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/me/leave',
    ...options,
  });
};

/**
 * Delete passkey
 * üõ°Ô∏è Requires authentication.
 *
 * Removes the *current user's* registered passkey credential.
 */
export const deletePasskey = <ThrowOnError extends boolean = true>(options?: Options<DeletePasskeyData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeletePasskeyResponses, DeletePasskeyErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/me/passkey',
    ...options,
  });
};

/**
 * Create passkey
 * üõ°Ô∏è Requires authentication.
 *
 * Registers a passkey for passwordless authentication by verifying a signed challenge and linking it to the *current user*.
 */
export const createPasskey = <ThrowOnError extends boolean = true>(options: Options<CreatePasskeyData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreatePasskeyResponses, CreatePasskeyErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/me/passkey',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get upload token
 * üõ°Ô∏è Requires authentication.
 *
 * Generates and returns an upload token for uploading files or images to a private S3 bucket, scoped to the *current user* and organization
 */
export const getUploadToken = <ThrowOnError extends boolean = true>(options: Options<GetUploadTokenData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetUploadTokenResponses, GetUploadTokenErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/upload-token',
    ...options,
  });
};

/**
 * Unsubscribe
 * üåê Public access.
 *
 * Unsubscribes the user from email notifications using a personal unsubscribe token. No authentication is required, as the token implicitly identifies the *current user*.
 */
export const unsubscribeMe = <ThrowOnError extends boolean = true>(options: Options<UnsubscribeMeData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, UnsubscribeMeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/unsubscribe',
    ...options,
  });
};

/**
 * Delete users
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Deletes one or more *users* from the system based on a list of IDs. This also removes the user's memberships (cascade) and sets references to the user to `null` where applicable.
 */
export const deleteUsers = <ThrowOnError extends boolean = true>(options?: Options<DeleteUsersData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteUsersResponses, DeleteUsersErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get list of users
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Returns a list of *users* at the system level.
 */
export const getUsers = <ThrowOnError extends boolean = true>(options: Options<GetUsersData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetUsersResponses, GetUsersErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/users',
    ...options,
  });
};

/**
 * Get user
 * üõ°Ô∏è Requires authentication.
 *
 * Retrieves a *user* by ID or slug.
 */
export const getUser = <ThrowOnError extends boolean = true>(options: Options<GetUserData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetUserResponses, GetUserErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/users/{idOrSlug}',
    ...options,
  });
};

/**
 * Update user
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Updates a *user* identified by ID or slug.
 */
export const updateUser = <ThrowOnError extends boolean = true>(options: Options<UpdateUserData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/users/{idOrSlug}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete organizations
 * üõ°Ô∏è Requires authentication.
 *
 * Deletes one or more *organizations* by ID.
 */
export const deleteOrganizations = <ThrowOnError extends boolean = true>(options?: Options<DeleteOrganizationsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteOrganizationsResponses, DeleteOrganizationsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get list of organizations
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Returns a list of *organizations* at the system level.
 */
export const getOrganizations = <ThrowOnError extends boolean = true>(options: Options<GetOrganizationsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetOrganizationsResponses, GetOrganizationsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations',
    ...options,
  });
};

/**
 * Create organization
 * üõ°Ô∏è Requires authentication.
 *
 * Creates a new *organization*.
 */
export const createOrganization = <ThrowOnError extends boolean = true>(options: Options<CreateOrganizationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreateOrganizationResponses, CreateOrganizationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get organization
 * üõ°Ô∏è Requires authentication.
 *
 * Retrieves an *organization* by ID or slug.
 */
export const getOrganization = <ThrowOnError extends boolean = true>(options: Options<GetOrganizationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetOrganizationResponses, GetOrganizationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations/{idOrSlug}',
    ...options,
  });
};

/**
 * Update organization
 * üõ°Ô∏è Requires authentication.
 *
 * Updates an *organization* by ID or slug.
 */
export const updateOrganization = <ThrowOnError extends boolean = true>(options: Options<UpdateOrganizationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UpdateOrganizationResponses, UpdateOrganizationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations/{idOrSlug}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get list of page entities
 * üõ°Ô∏è Requires authentication.
 *
 * Returns a paginated list of *entities* (e.g. *users*, *organizations*) the current user has access to.
 * Can optionally include the current user's enrollment information for each entity (when applicable).
 * You can also provide a specific user ID to retrieve the entities that *user* is enrolled in, useful for profile views or access audits.
 * The response includes only fields shared across all entity types, such as `id`, `slug`, and `name`.
 */
export const getPageEntities = <ThrowOnError extends boolean = true>(options?: Options<GetPageEntitiesData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetPageEntitiesResponses, GetPageEntitiesErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/entities/page',
    ...options,
  });
};

/**
 * Get all of context user entities
 * üõ°Ô∏è Requires authentication.
 *
 * Returns all *contextual entities* (e.g. *organizations*) the specified user is a member of.
 * Each result includes the user's membership data and a list of other users with administrator roles within the same entity.
 */
export const getEntitiesWithAdmins = <ThrowOnError extends boolean = true>(options: Options<GetEntitiesWithAdminsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetEntitiesWithAdminsResponses, GetEntitiesWithAdminsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/entities/context',
    ...options,
  });
};

/**
 * Check if slug is available
 * üõ°Ô∏è Requires authentication.
 *
 * Checks whether a given slug is available across all entity types (e.g. *organizations*, *users*).
 * Primarily used to prevent slug collisions before creating or updating an entity.
 */
export const checkSlug = <ThrowOnError extends boolean = true>(options?: Options<CheckSlugData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CheckSlugResponses, CheckSlugErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/entities/check-slug',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Invite to system
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Invites one or more users to the system via email. Can be used to onboard system level users or admins.
 */
export const systemInvite = <ThrowOnError extends boolean = true>(options?: Options<SystemInviteData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SystemInviteResponses, SystemInviteErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/system/invite',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get presigned URL
 * üõ°Ô∏è Requires authentication.
 *
 * Generates and returns a presigned URL for uploading files to an S3 bucket.
 */
export const getPresignedUrl = <ThrowOnError extends boolean = true>(options: Options<GetPresignedUrlData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetPresignedUrlResponses, GetPresignedUrlErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/system/presigned-url',
    ...options,
  });
};

/**
 * Paddle webhook (WIP)
 * üåê Public access.
 *
 * Receives and handles Paddle subscription events such as purchases, renewals, and cancellations.
 */
export const paddleWebhook = <ThrowOnError extends boolean = true>(options?: Options<PaddleWebhookData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PaddleWebhookResponses, PaddleWebhookErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/system/paddle-webhook',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Newsletter to members
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Sends a newsletter to members of one or more specified organizations.
 */
export const sendNewsletter = <ThrowOnError extends boolean = true>(options: Options<SendNewsletterData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<SendNewsletterResponses, SendNewsletterErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/system/newsletter',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete requests
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Deletes one or more *requests* from the system by their IDs.
 */
export const deleteRequests = <ThrowOnError extends boolean = true>(options?: Options<DeleteRequestsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteRequestsResponses, DeleteRequestsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/requests',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get list of requests
 * üõ°Ô∏è Requires authentication (system access).
 *
 * Returns a list of submitted *requests* across all types: contact form, newsletter, and waitlist.
 */
export const getRequests = <ThrowOnError extends boolean = true>(options: Options<GetRequestsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetRequestsResponses, GetRequestsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/requests',
    ...options,
  });
};

/**
 * Create request
 * üåê Public access.
 *
 * Submits a new *request* to the system. Supported types include contact form, newsletter signup, and waitlist entry.
 */
export const createRequest = <ThrowOnError extends boolean = true>(options?: Options<CreateRequestData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CreateRequestResponses, CreateRequestErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/requests',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get metrics
 * üõ°Ô∏è Requires authentication (system access).
 *
 * EXPERIMENTAL. Returns raw system observability data (e.g. node level statistics or runtime insights).
 * Primarily intended for internal monitoring and diagnostics.
 */
export const getMetrics = <ThrowOnError extends boolean = true>(options?: Options<GetMetricsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMetricsResponses, GetMetricsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/metrics',
    ...options,
  });
};

/**
 * Get public counts
 * üåê Public access.
 *
 * Returns basic count metrics for entity types such as `users` and `organizations`.
 * This endpoint is public and uses a 1 minute in memory cache for performance.
 */
export const getPublicCounts = <ThrowOnError extends boolean = true>(options?: Options<GetPublicCountsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetPublicCountsResponses, GetPublicCountsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/metrics/public',
    ...options,
  });
};

/**
 * Shape proxy
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Proxies requests to ElectricSQL's shape endpoint for the `attachments` table.
 * Used by clients to synchronize local data with server state via the shape log system.
 * This endpoint ensures required query parameters are forwarded and response headers are adjusted for browser compatibility.
 */
export const shapeProxy = <ThrowOnError extends boolean = true>(options: Options<ShapeProxyData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<ShapeProxyResponses, ShapeProxyErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/shape-proxy',
    ...options,
  });
};

/**
 * Delete attachments
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Deletes one or more *attachment* records by ID. This does not delete the underlying file in storage.
 */
export const deleteAttachments = <ThrowOnError extends boolean = true>(options: Options<DeleteAttachmentsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteAttachmentsResponses, DeleteAttachmentsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get list of attachments
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Retrieves all *attachments* associated with a specific entity, such as an organization.
 */
export const getAttachments = <ThrowOnError extends boolean = true>(options: Options<GetAttachmentsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetAttachmentsResponses, GetAttachmentsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments',
    ...options,
  });
};

/**
 * Create attachments
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Registers one or more new *attachments* after client side upload. Includes metadata like name, type, and linked entity.
 */
export const createAttachment = <ThrowOnError extends boolean = true>(options: Options<CreateAttachmentData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreateAttachmentResponses, CreateAttachmentErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get attachment
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Fetches metadata and access details for a single *attachment* by ID.
 */
export const getAttachment = <ThrowOnError extends boolean = true>(options: Options<GetAttachmentData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetAttachmentResponses, GetAttachmentErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/{id}',
    ...options,
  });
};

/**
 * Update attachment
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Updates metadata of an *attachment*, such as its name or associated entity.
 */
export const updateAttachment = <ThrowOnError extends boolean = true>(options: Options<UpdateAttachmentData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UpdateAttachmentResponses, UpdateAttachmentErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get attachment cover
 * üåê Public access.
 *
 * Returns a preview or cover image for a file, when available (e.g. first page of a PDF or image thumbnail).
 */
export const getAttachmentCover = <ThrowOnError extends boolean = true>(options: Options<GetAttachmentCoverData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetAttachmentCoverResponses, GetAttachmentCoverErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/{id}/cover',
    ...options,
  });
};

/**
 * Redirect to attachment
 * üåê Public access.
 *
 * Redirects to the file's public or presigned URL, depending on storage visibility.
 */
export const redirectToAttachment = <ThrowOnError extends boolean = true>(options: Options<RedirectToAttachmentData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<RedirectToAttachmentResponses, RedirectToAttachmentErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/{id}/link',
    ...options,
  });
};

/**
 * Delete memberships
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Deletes one or more *memberships* by ID. This removes the membership but does not delete the associated user(s).
 */
export const deleteMemberships = <ThrowOnError extends boolean = true>(options: Options<DeleteMembershipsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteMembershipsResponses, DeleteMembershipsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create memberships
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Creates one or more *memberships*, inviting users (existing or new) to a contextual entity such as an organization.
 */
export const membershipInvite = <ThrowOnError extends boolean = true>(options: Options<MembershipInviteData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<MembershipInviteResponses, MembershipInviteErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update membership
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Updates the *membership* metadata, such as role, `muted`, or `archived` status.
 */
export const updateMembership = <ThrowOnError extends boolean = true>(options: Options<UpdateMembershipData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UpdateMembershipResponses, UpdateMembershipErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get list of members
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Retrieves members (users) of a contextual entity by ID or slug, including their associated *membership* data.
 */
export const getMembers = <ThrowOnError extends boolean = true>(options: Options<GetMembersData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetMembersResponses, GetMembersErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships/members',
    ...options,
  });
};

/**
 * Get list of invitations
 * üõ°Ô∏è Requires authentication (organization access).
 *
 * Returns pending *membership* invitations for a contextual entity, identified by ID or slug.
 */
export const getPendingInvitations = <ThrowOnError extends boolean = true>(options: Options<GetPendingInvitationsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetPendingInvitationsResponses, GetPendingInvitationsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships/pending',
    ...options,
  });
};
