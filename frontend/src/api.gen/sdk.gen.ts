// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
  CheckEmailData,
  CheckEmailResponses,
  CheckEmailErrors,
  SignUpData,
  SignUpResponses,
  SignUpErrors,
  SignUpWithTokenData,
  SignUpWithTokenResponses,
  SignUpWithTokenErrors,
  SendVerificationEmailData,
  SendVerificationEmailResponses,
  SendVerificationEmailErrors,
  VerifyEmailData,
  VerifyEmailResponses,
  VerifyEmailErrors,
  RequestPasswordData,
  RequestPasswordResponses,
  RequestPasswordErrors,
  CreatePasswordData,
  CreatePasswordResponses,
  CreatePasswordErrors,
  SignInData,
  SignInResponses,
  SignInErrors,
  CheckTokenData,
  CheckTokenResponses,
  CheckTokenErrors,
  AcceptEntityInviteData,
  AcceptEntityInviteResponses,
  AcceptEntityInviteErrors,
  StartImpersonationData,
  StartImpersonationResponses,
  StartImpersonationErrors,
  StopImpersonationData,
  StopImpersonationResponses,
  StopImpersonationErrors,
  SignOutData,
  SignOutResponses,
  SignOutErrors,
  GithubSignInData,
  GithubSignInErrors,
  GoogleSignInData,
  GoogleSignInErrors,
  MicrosoftSignInData,
  MicrosoftSignInErrors,
  GithubSignInCallbackData,
  GithubSignInCallbackErrors,
  GoogleSignInCallbackData,
  GoogleSignInCallbackErrors,
  MicrosoftSignInCallbackData,
  MicrosoftSignInCallbackErrors,
  GetPasskeyChallengeData,
  GetPasskeyChallengeResponses,
  GetPasskeyChallengeErrors,
  SignInWithPasskeyData,
  SignInWithPasskeyResponses,
  SignInWithPasskeyErrors,
  DeleteMeData,
  DeleteMeResponses,
  DeleteMeErrors,
  GetMeData,
  GetMeResponses,
  GetMeErrors,
  UpdateMeData,
  UpdateMeResponses,
  UpdateMeErrors,
  GetMyAuthData,
  GetMyAuthResponses,
  GetMyAuthErrors,
  GetMyMenuData,
  GetMyMenuResponses,
  GetMyMenuErrors,
  DeleteSessionsData,
  DeleteSessionsResponses,
  DeleteSessionsErrors,
  DeleteMyMembershipData,
  DeleteMyMembershipResponses,
  DeleteMyMembershipErrors,
  DeletePasskeyData,
  DeletePasskeyResponses,
  DeletePasskeyErrors,
  CreatePasskeyData,
  CreatePasskeyResponses,
  CreatePasskeyErrors,
  GetUploadTokenData,
  GetUploadTokenResponses,
  GetUploadTokenErrors,
  UnsubscribeMeData,
  UnsubscribeMeErrors,
  DeleteUsersData,
  DeleteUsersResponses,
  DeleteUsersErrors,
  GetUsersData,
  GetUsersResponses,
  GetUsersErrors,
  GetUserData,
  GetUserResponses,
  GetUserErrors,
  UpdateUserData,
  UpdateUserResponses,
  UpdateUserErrors,
  DeleteOrganizationsData,
  DeleteOrganizationsResponses,
  DeleteOrganizationsErrors,
  GetOrganizationsData,
  GetOrganizationsResponses,
  GetOrganizationsErrors,
  CreateOrganizationData,
  CreateOrganizationResponses,
  CreateOrganizationErrors,
  GetOrganizationData,
  GetOrganizationResponses,
  GetOrganizationErrors,
  UpdateOrganizationData,
  UpdateOrganizationResponses,
  UpdateOrganizationErrors,
  GetPageEntitiesData,
  GetPageEntitiesResponses,
  GetPageEntitiesErrors,
  GetContextEntitiesData,
  GetContextEntitiesResponses,
  GetContextEntitiesErrors,
  CheckSlugData,
  CheckSlugResponses,
  CheckSlugErrors,
  SystemInviteData,
  SystemInviteResponses,
  SystemInviteErrors,
  GetPresignedUrlData,
  GetPresignedUrlResponses,
  GetPresignedUrlErrors,
  PaddleWebhookData,
  PaddleWebhookResponses,
  PaddleWebhookErrors,
  SendNewsletterData,
  SendNewsletterResponses,
  SendNewsletterErrors,
  DeleteRequestsData,
  DeleteRequestsResponses,
  DeleteRequestsErrors,
  GetRequestsData,
  GetRequestsResponses,
  GetRequestsErrors,
  CreateRequestData,
  CreateRequestResponses,
  CreateRequestErrors,
  GetMetricsData,
  GetMetricsResponses,
  GetMetricsErrors,
  GetPublicCountsData,
  GetPublicCountsResponses,
  GetPublicCountsErrors,
  ShapeProxyData,
  ShapeProxyResponses,
  ShapeProxyErrors,
  DeleteAttachmentsData,
  DeleteAttachmentsResponses,
  DeleteAttachmentsErrors,
  GetAttachmentsData,
  GetAttachmentsResponses,
  GetAttachmentsErrors,
  CreateAttachmentData,
  CreateAttachmentResponses,
  CreateAttachmentErrors,
  GetAttachmentData,
  GetAttachmentResponses,
  GetAttachmentErrors,
  UpdateAttachmentData,
  UpdateAttachmentResponses,
  UpdateAttachmentErrors,
  GetAttachmentCoverData,
  GetAttachmentCoverResponses,
  GetAttachmentCoverErrors,
  RedirectToAttachmentData,
  RedirectToAttachmentResponses,
  RedirectToAttachmentErrors,
  DeleteMembershipsData,
  DeleteMembershipsResponses,
  DeleteMembershipsErrors,
  MembershipInviteData,
  MembershipInviteResponses,
  MembershipInviteErrors,
  UpdateMembershipData,
  UpdateMembershipResponses,
  UpdateMembershipErrors,
  GetMembersData,
  GetMembersResponses,
  GetMembersErrors,
  GetPendingInvitationsData,
  GetPendingInvitationsResponses,
  GetPendingInvitationsErrors,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Check if email exists
 * Check if user with email address exists.
 */
export const checkEmail = <ThrowOnError extends boolean = true>(options?: Options<CheckEmailData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CheckEmailResponses, CheckEmailErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/check-email',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Sign up with password
 * Sign up with email and password. User will receive a verification email.
 */
export const signUp = <ThrowOnError extends boolean = true>(options?: Options<SignUpData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SignUpResponses, SignUpErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/sign-up',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Sign up to accept invite
 * Sign up with email and password to accept system or organization invitation.
 */
export const signUpWithToken = <ThrowOnError extends boolean = true>(options: Options<SignUpWithTokenData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<SignUpWithTokenResponses, SignUpWithTokenErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/sign-up/{token}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Resend verification email
 * Resend verification email to user based on token id.
 */
export const sendVerificationEmail = <ThrowOnError extends boolean = true>(options?: Options<SendVerificationEmailData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SendVerificationEmailResponses, SendVerificationEmailErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/send-verification-email',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Verify email by token
 * Verify email address by token from the verification email. Receive a user session when successful.
 */
export const verifyEmail = <ThrowOnError extends boolean = true>(options: Options<VerifyEmailData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<VerifyEmailResponses, VerifyEmailErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/verify-email/{token}',
    ...options,
  });
};

/**
 * Request new password
 * An email will be sent with a link to create a password.
 */
export const requestPassword = <ThrowOnError extends boolean = true>(options?: Options<RequestPasswordData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<RequestPasswordResponses, RequestPasswordErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/request-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create password by token
 * Submit new password and directly receive a user session.
 */
export const createPassword = <ThrowOnError extends boolean = true>(options: Options<CreatePasswordData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreatePasswordResponses, CreatePasswordErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/create-password/{token}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Sign in with password
 * Sign in with email and password.
 */
export const signIn = <ThrowOnError extends boolean = true>(options?: Options<SignInData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SignInResponses, SignInErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/sign-in',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Token validation check
 * This endpoint is used to check if a token is still valid. It is used to provide direct user feedback on tokens such as reset password and invitation.
 */
export const checkToken = <ThrowOnError extends boolean = true>(options: Options<CheckTokenData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CheckTokenResponses, CheckTokenErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/check-token/{id}',
    ...options,
  });
};

/**
 * Accept invitation
 * Accept invitation token
 */
export const acceptEntityInvite = <ThrowOnError extends boolean = true>(options: Options<AcceptEntityInviteData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AcceptEntityInviteResponses, AcceptEntityInviteErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/accept-invite/{token}',
    ...options,
  });
};

/**
 * Start impersonating
 * System admin impersonates a selected user by id by receiving a special impersonation session.
 */
export const startImpersonation = <ThrowOnError extends boolean = true>(options: Options<StartImpersonationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<StartImpersonationResponses, StartImpersonationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/impersonation/start',
    ...options,
  });
};

/**
 * Stop impersonating
 * Stop impersonating by clearing impersonation session.
 */
export const stopImpersonation = <ThrowOnError extends boolean = true>(options?: Options<StopImpersonationData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<StopImpersonationResponses, StopImpersonationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/impersonation/stop',
    ...options,
  });
};

/**
 * Sign out
 * Sign out yourself and clear session.
 */
export const signOut = <ThrowOnError extends boolean = true>(options?: Options<SignOutData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<SignOutResponses, SignOutErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/sign-out',
    ...options,
  });
};

/**
 * Authenticate with GitHub
 * Authenticate with Github to sign in or sign up. A `connect` (userId),`redirect` or `token` query parameter can be used to connect account, redirect to a specific page or to accept invitation.
 */
export const githubSignIn = <ThrowOnError extends boolean = true>(options: Options<GithubSignInData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, GithubSignInErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/github',
    ...options,
  });
};

/**
 * Authenticate with Google
 * Authenticate with Google to sign in or sign up. A `connect` (userId),`redirect` or `token` query parameter can be used to connect account, redirect to a specific page or to accept invitation.
 */
export const googleSignIn = <ThrowOnError extends boolean = true>(options: Options<GoogleSignInData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, GoogleSignInErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/google',
    ...options,
  });
};

/**
 * Authenticate with Microsoft
 * Authenticate with Microsoft to sign in or sign up.  A `connect` (userId),`redirect` or `token` query parameter can be used to connect account, redirect to a specific page or to accept invitation.
 */
export const microsoftSignIn = <ThrowOnError extends boolean = true>(options: Options<MicrosoftSignInData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, MicrosoftSignInErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/microsoft',
    ...options,
  });
};

/**
 * Callback for GitHub
 * Callback to receive authorization and basic user data from Github.
 */
export const githubSignInCallback = <ThrowOnError extends boolean = true>(options: Options<GithubSignInCallbackData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, GithubSignInCallbackErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/github/callback',
    ...options,
  });
};

/**
 * Callback for Google
 * Callback to receive authorization and basic user data from Google.
 */
export const googleSignInCallback = <ThrowOnError extends boolean = true>(options: Options<GoogleSignInCallbackData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, GoogleSignInCallbackErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/google/callback',
    ...options,
  });
};

/**
 * Callback for Microsoft
 * Callback to receive authorization and basic user data from Microsoft.
 */
export const microsoftSignInCallback = <ThrowOnError extends boolean = true>(options: Options<MicrosoftSignInCallbackData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, MicrosoftSignInCallbackErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/microsoft/callback',
    ...options,
  });
};

/**
 * Get passkey challenge
 * Handing over the challenge: this results in a key pair, private and public key being created on the device.
 */
export const getPasskeyChallenge = <ThrowOnError extends boolean = true>(options?: Options<GetPasskeyChallengeData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetPasskeyChallengeResponses, GetPasskeyChallengeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/auth/passkey-challenge',
    ...options,
  });
};

/**
 * Verify passkey
 * Verify passkey by checking the validity of signature with public key.
 */
export const signInWithPasskey = <ThrowOnError extends boolean = true>(options?: Options<SignInWithPasskeyData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SignInWithPasskeyResponses, SignInWithPasskeyErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/auth/passkey-verification',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete self
 * Delete the current user (self).
 */
export const deleteMe = <ThrowOnError extends boolean = true>(options?: Options<DeleteMeData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteMeResponses, DeleteMeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me',
    ...options,
  });
};

/**
 * Get me
 * Get the current user (me). It includes a `counts` object.
 */
export const getMe = <ThrowOnError extends boolean = true>(options?: Options<GetMeData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMeResponses, GetMeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me',
    ...options,
  });
};

/**
 * Update self
 * Update the current user (self).
 */
export const updateMe = <ThrowOnError extends boolean = true>(options?: Options<UpdateMeData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).put<UpdateMeResponses, UpdateMeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get self auth data
 * Get the current user (self). It includes sessions, oauth accounts and sign in options.
 */
export const getMyAuth = <ThrowOnError extends boolean = true>(options?: Options<GetMyAuthData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMyAuthResponses, GetMyAuthErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/auth',
    ...options,
  });
};

/**
 * Get menu
 * Receive menu data with all contextual entities of which the current user is a member. It is in essence a restructured list of `memberships` per entity type, with some entity data in it.
 */
export const getMyMenu = <ThrowOnError extends boolean = true>(options?: Options<GetMyMenuData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMyMenuResponses, GetMyMenuErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/menu',
    ...options,
  });
};

/**
 * Terminate sessions
 * Terminate sessions of the current user by list of ids.
 */
export const deleteSessions = <ThrowOnError extends boolean = true>(options?: Options<DeleteSessionsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteSessionsResponses, DeleteSessionsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/sessions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Leave entity
 * Remove your own entity membership by yourself.
 */
export const deleteMyMembership = <ThrowOnError extends boolean = true>(options: Options<DeleteMyMembershipData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteMyMembershipResponses, DeleteMyMembershipErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/me/leave',
    ...options,
  });
};

/**
 * Delete passkey
 * Delete your passkey record.
 */
export const deletePasskey = <ThrowOnError extends boolean = true>(options?: Options<DeletePasskeyData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeletePasskeyResponses, DeletePasskeyErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/me/passkey',
    ...options,
  });
};

/**
 * Create passkey
 * The server associates the key and the credential ID with the user for future authentication flows and checks the validity of the operation by verifying the signed challenge with the key.
 */
export const createPasskey = <ThrowOnError extends boolean = true>(options: Options<CreatePasskeyData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreatePasskeyResponses, CreatePasskeyErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    url: '/me/passkey',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get upload token
 * This endpoint is used to get an upload token for a user or organization. The token can be used to upload or private images/files to your S3 bucket using
 */
export const getUploadToken = <ThrowOnError extends boolean = true>(options: Options<GetUploadTokenData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetUploadTokenResponses, GetUploadTokenErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/upload-token',
    ...options,
  });
};

/**
 * Unsubscribe
 * Unsubscribe using a personal unsubscribe token.
 */
export const unsubscribeMe = <ThrowOnError extends boolean = true>(options: Options<UnsubscribeMeData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, UnsubscribeMeErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/me/unsubscribe',
    ...options,
  });
};

/**
 * Delete users
 * Delete users from system by list of ids.
 */
export const deleteUsers = <ThrowOnError extends boolean = true>(options?: Options<DeleteUsersData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteUsersResponses, DeleteUsersErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get list of users
 * Get a list of users on system level.
 */
export const getUsers = <ThrowOnError extends boolean = true>(options: Options<GetUsersData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetUsersResponses, GetUsersErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/users',
    ...options,
  });
};

/**
 * Get user
 * Get a user by id or slug.
 */
export const getUser = <ThrowOnError extends boolean = true>(options: Options<GetUserData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetUserResponses, GetUserErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/users/{idOrSlug}',
    ...options,
  });
};

/**
 * Update user
 * Update a user by id or slug.
 */
export const updateUser = <ThrowOnError extends boolean = true>(options: Options<UpdateUserData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/users/{idOrSlug}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete organizations
 * Delete organizations by ids.
 */
export const deleteOrganizations = <ThrowOnError extends boolean = true>(options?: Options<DeleteOrganizationsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteOrganizationsResponses, DeleteOrganizationsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get list of organizations
 * Get list of organizations. Currently only available to system admins.
 */
export const getOrganizations = <ThrowOnError extends boolean = true>(options: Options<GetOrganizationsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetOrganizationsResponses, GetOrganizationsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations',
    ...options,
  });
};

/**
 * Create organization
 * Create a new organization.
 */
export const createOrganization = <ThrowOnError extends boolean = true>(options: Options<CreateOrganizationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreateOrganizationResponses, CreateOrganizationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get organization
 * Get an organization by id or slug.
 */
export const getOrganization = <ThrowOnError extends boolean = true>(options: Options<GetOrganizationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetOrganizationResponses, GetOrganizationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations/{idOrSlug}',
    ...options,
  });
};

/**
 * Update organization
 * Update organization by id or slug.
 */
export const updateOrganization = <ThrowOnError extends boolean = true>(options: Options<UpdateOrganizationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UpdateOrganizationResponses, UpdateOrganizationErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/organizations/{idOrSlug}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get list of page entities
 * Get page entities such as users and organizations. It returns a paginated list of entities to which the user has access. The schema is limited to common fields.
 */
export const getPageEntities = <ThrowOnError extends boolean = true>(options?: Options<GetPageEntitiesData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetPageEntitiesResponses, GetPageEntitiesErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/entities/page',
    ...options,
  });
};

/**
 * Get all of context user entities
 * Get context entities such organizations of specified user. It returns list of entities based of requested tpye to which the user are part of. With user membership & other members of entity.
 */
export const getContextEntities = <ThrowOnError extends boolean = true>(options: Options<GetContextEntitiesData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetContextEntitiesResponses, GetContextEntitiesErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/entities/context',
    ...options,
  });
};

/**
 * Check if slug is available
 * This endpoint is used to check if a slug is available among ALL contextual entities such as organizations.
 */
export const checkSlug = <ThrowOnError extends boolean = true>(options?: Options<CheckSlugData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CheckSlugResponses, CheckSlugErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/entities/check-slug',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Invite to system
 * Invite one or more users to system by email address.
 */
export const systemInvite = <ThrowOnError extends boolean = true>(options?: Options<SystemInviteData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SystemInviteResponses, SystemInviteErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/system/invite',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const getPresignedUrl = <ThrowOnError extends boolean = true>(options: Options<GetPresignedUrlData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetPresignedUrlResponses, GetPresignedUrlErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/system/presigned-url',
    ...options,
  });
};

/**
 * Paddle webhook
 * Paddle webhook for subscription events
 */
export const paddleWebhook = <ThrowOnError extends boolean = true>(options?: Options<PaddleWebhookData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PaddleWebhookResponses, PaddleWebhookErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/system/paddle-webhook',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Newsletter to members
 * Send a newsletter to requested organizations members.
 */
export const sendNewsletter = <ThrowOnError extends boolean = true>(options: Options<SendNewsletterData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<SendNewsletterResponses, SendNewsletterErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/system/newsletter',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete requests
 * Delete requests by ids.
 */
export const deleteRequests = <ThrowOnError extends boolean = true>(options?: Options<DeleteRequestsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<DeleteRequestsResponses, DeleteRequestsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/requests',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get list of requests
 * Get list of requests on system level for waitlist, submit contact form or to join newsletter.
 */
export const getRequests = <ThrowOnError extends boolean = true>(options: Options<GetRequestsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetRequestsResponses, GetRequestsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/requests',
    ...options,
  });
};

/**
 * Create request
 * Create a request on system level. Request supports waitlist, contact form and newsletter.
 */
export const createRequest = <ThrowOnError extends boolean = true>(options?: Options<CreateRequestData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CreateRequestResponses, CreateRequestErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/requests',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get metrics
 * EXPERIMENTAL. Receive node observability metrics.
 */
export const getMetrics = <ThrowOnError extends boolean = true>(options?: Options<GetMetricsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMetricsResponses, GetMetricsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/metrics',
    ...options,
  });
};

/**
 * Get public counts
 * Get a count of all entities (ie. users, organizations). 1 minute in-memory cache.
 */
export const getPublicCounts = <ThrowOnError extends boolean = true>(options?: Options<GetPublicCountsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetPublicCountsResponses, GetPublicCountsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/metrics/public',
    ...options,
  });
};

/**
 * Shape proxy
 * Get shape proxy for attachments to keep attachment data in sync.
 */
export const shapeProxy = <ThrowOnError extends boolean = true>(options: Options<ShapeProxyData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<ShapeProxyResponses, ShapeProxyErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/shape-proxy',
    ...options,
  });
};

/**
 * Delete attachments
 * Delete attachments by their ids
 */
export const deleteAttachments = <ThrowOnError extends boolean = true>(options: Options<DeleteAttachmentsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteAttachmentsResponses, DeleteAttachmentsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get list of attachments
 * Get attachments for an organization.
 */
export const getAttachments = <ThrowOnError extends boolean = true>(options: Options<GetAttachmentsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetAttachmentsResponses, GetAttachmentsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments',
    ...options,
  });
};

/**
 * Create attachments
 * Create one or more new attachments.
 */
export const createAttachment = <ThrowOnError extends boolean = true>(options: Options<CreateAttachmentData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreateAttachmentResponses, CreateAttachmentErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get attachment
 * Get an attachment by id.
 */
export const getAttachment = <ThrowOnError extends boolean = true>(options: Options<GetAttachmentData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetAttachmentResponses, GetAttachmentErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/{id}',
    ...options,
  });
};

/**
 * Update attachment
 * Update attachment by id.
 */
export const updateAttachment = <ThrowOnError extends boolean = true>(options: Options<UpdateAttachmentData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UpdateAttachmentResponses, UpdateAttachmentErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get attachment cover
 * Get attachment cover image by id.
 */
export const getAttachmentCover = <ThrowOnError extends boolean = true>(options: Options<GetAttachmentCoverData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetAttachmentCoverResponses, GetAttachmentCoverErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/{id}/cover',
    ...options,
  });
};

/**
 * Redirect to attachment
 * Redirect to attachment by id.
 */
export const redirectToAttachment = <ThrowOnError extends boolean = true>(options: Options<RedirectToAttachmentData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<RedirectToAttachmentResponses, RedirectToAttachmentErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/attachments/{id}/link',
    ...options,
  });
};

/**
 * Delete memberships
 * Delete memberships by their ids. This will remove the membership but not delete any user(s).
 */
export const deleteMemberships = <ThrowOnError extends boolean = true>(options: Options<DeleteMembershipsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteMembershipsResponses, DeleteMembershipsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create memberships
 * Create memberships (invite members that may or may not exist in the system) to an entity such as an organization.
 */
export const membershipInvite = <ThrowOnError extends boolean = true>(options: Options<MembershipInviteData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<MembershipInviteResponses, MembershipInviteErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update membership
 * Update role, muted, or archived status in a membership.
 */
export const updateMembership = <ThrowOnError extends boolean = true>(options: Options<UpdateMembershipData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UpdateMembershipResponses, UpdateMembershipErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get list of members
 * Get members of a context entity by id or slug. It returns members (users) with their membership.
 */
export const getMembers = <ThrowOnError extends boolean = true>(options: Options<GetMembersData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetMembersResponses, GetMembersErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships/members',
    ...options,
  });
};

/**
 * Get list of invitations
 * Get pending membership invitations from a context entity by id or slug. It returns invite info.
 */
export const getPendingInvitations = <ThrowOnError extends boolean = true>(options: Options<GetPendingInvitationsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetPendingInvitationsResponses, GetPendingInvitationsErrors, ThrowOnError, 'data'>({
    responseStyle: 'data',
    security: [
      {
        in: 'cookie',
        name: 'cella-session-v1',
        type: 'apiKey',
      },
    ],
    url: '/{orgIdOrSlug}/memberships/pending',
    ...options,
  });
};
