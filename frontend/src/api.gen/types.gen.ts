// This file is auto-generated by @hey-api/openapi-ts

export type EntityBaseSchema = {
  id: string;
  entityType: 'organization';
  slug: string;
  name: string;
  thumbnailUrl?: string | null;
  bannerUrl?: string | null;
};

export type UserSummarySchema = {
  id: string;
  entityType: 'user';
  slug: string;
  name: string;
  thumbnailUrl?: string | null;
  bannerUrl?: string | null;
  email: string;
};

export type MembershipSummarySchema = {
  id: string;
  contextType: 'organization';
  userId: string;
  role: 'member' | 'admin';
  archived: boolean;
  muted: boolean;
  order: number;
  organizationId: string;
};

export type MenuSchema = {
  organization: Array<{
    id: string;
    entityType: 'organization';
    slug: string;
    name: string;
    thumbnailUrl?: string | null;
    createdAt: string;
    modifiedAt: string | null;
    membership: {
      id: string;
      contextType: 'organization';
      userId: string;
      role: 'member' | 'admin';
      archived: boolean;
      muted: boolean;
      order: number;
      organizationId: string;
    };
    organizationId?: string;
    submenu?: Array<{
      id: string;
      entityType: 'organization';
      slug: string;
      name: string;
      thumbnailUrl?: string | null;
      createdAt: string;
      modifiedAt: string | null;
      membership: {
        id: string;
        contextType: 'organization';
        userId: string;
        role: 'member' | 'admin';
        archived: boolean;
        muted: boolean;
        order: number;
        organizationId: string;
      };
      organizationId?: string;
    }>;
  }>;
};

export type ApiError = {
  name: string;
  message: string;
  type:
    | 'bad_request_action'
    | 'body_too_large'
    | 'body_too_large.text'
    | 'contact_mistake'
    | 'create_resource'
    | 'delete_resource'
    | 'delete_resource_forbidden'
    | 'delete_resource_forbidden.text'
    | 'delete_resources'
    | 'duplicate_creation'
    | 'email_exists'
    | 'email_verification_expired'
    | 'email_verification_expired.text'
    | 'email_verification_not_found'
    | 'email_verification_not_found.text'
    | 'error'
    | 'expired.token'
    | 'expired_token'
    | 'sync_failed'
    | 'sync_failed.text'
    | 'expired_token.text'
    | 'forbidden'
    | 'missing_auth_key'
    | 'missing_auth_key.text'
    | 'forbidden.text'
    | 'forbidden_action'
    | 'forbidden_strategy'
    | 'forbidden_strategy.text'
    | 'image_upload_failed'
    | 'impersonation_failed'
    | 'invalid_credentials'
    | 'invalid_credentials.text'
    | 'invalid_email'
    | 'invalid_email_or_password'
    | 'invalid_invitation'
    | 'invalid_origin'
    | 'invalid_param'
    | 'invalid_param.text'
    | 'invalid_password'
    | 'invalid_request'
    | 'invalid_request.text'
    | 'invalid_role'
    | 'invalid_role.text'
    | 'invalid_session'
    | 'invalid_session.text'
    | 'invalid_state'
    | 'invalid_state.text'
    | 'invalid_token'
    | 'invitation_expired'
    | 'invitation_expired.text'
    | 'invitation_not_found'
    | 'invitation_not_found.text'
    | 'load_more_failed'
    | 'maybe_bot'
    | 'maybe_bot.text'
    | 'name_required'
    | 'network_error'
    | 'newsletter_sign_up'
    | 'no_email_found'
    | 'no_email_found.text'
    | 'no_password_found'
    | 'no_recipients'
    | 'no_recipients.text'
    | 'no_selected_rows'
    | 'no_session'
    | 'no_session.text'
    | 'no_sysadmin'
    | 'no_sysadmin.text'
    | 'no_user_found'
    | 'not_found'
    | 'not_found.text'
    | 'not_found.token'
    | 'oauth_merge_error'
    | 'oauth_merge_error.text'
    | 'oauth_failed'
    | 'oauth_failed.text'
    | 'oauth_mismatch'
    | 'oauth_mismatch.text'
    | 'organization_missing'
    | 'organization_missing.text'
    | 'passkey_add_failed'
    | 'passkey_failed'
    | 'passkey_failed.text'
    | 'passkey_remove_failed'
    | 'passkey_sign_in'
    | 'password_reset_expired'
    | 'password_reset_expired.text'
    | 'password_reset_not_found'
    | 'password_reset_not_found.text'
    | 'reorder_resource'
    | 'reported_try_later'
    | 'reported_try_or_contact'
    | 'request_email_is_user'
    | 'request_exists'
    | 'request_failed'
    | 'reset_password_email'
    | 'resource_forbidden'
    | 'resource_forbidden.text'
    | 'resource_not_found'
    | 'resource_not_found.text'
    | 'route_not_found'
    | 'route_not_found.text'
    | 'page_not_found'
    | 'page_not_found.text'
    | 'server_error'
    | 'server_error.text'
    | 'sign_up_restricted'
    | 'sign_up_restricted.text'
    | 'slug_exists'
    | 'too_many_requests'
    | 'too_many_requests.text'
    | 'try_again_later'
    | 'unable_to_verify'
    | 'unauthorized'
    | 'unauthorized.text'
    | 'unauthorized_action'
    | 'unsubscribe_failed'
    | 'unsubscribe_failed.text'
    | 'unsupported_oauth'
    | 'unsupported_oauth.text'
    | 'update_resource'
    | 'user_mismatch'
    | 'user_mismatch.text'
    | 'oauth_connection_not_found'
    | 'restrict_by_org'
    | 'restrict_by_app'
    | 'form.invalid_type'
    | 'form.too_small'
    | 'form.too_big'
    | 'form.custom'
    | 'form.invalid_string'
    | 'form.invalid_enum_value'
    | 'form.invalid_literal'
    | 'form.unrecognized_keys'
    | 'form.invalid_union'
    | 'form.invalid_union_discriminator'
    | 'form.invalid_date'
    | 'form.not_multiple_of'
    | 'form.not_finite'
    | 'form.invalid_intersection_types'
    | 'form.invalid_arguments'
    | 'form.invalid_return_type'
    | 'form.required'
    | 'form.min'
    | 'form.max'
    | 'form.minLength'
    | 'form.maxLength'
    | 'form.pattern'
    | 'form.validate'
    | 'form.valueAsNumber'
    | 'form.valueAsDate'
    | 'form.setValueAs'
    | 'form.disabled';
  status:
    | 400
    | 401
    | 402
    | 403
    | 404
    | 405
    | 406
    | 407
    | 408
    | 409
    | 410
    | 411
    | 412
    | 413
    | 414
    | 415
    | 416
    | 417
    | 418
    | 421
    | 422
    | 423
    | 424
    | 425
    | 426
    | 428
    | 429
    | 431
    | 451
    | 500
    | 501
    | 502
    | 503
    | 504
    | 505
    | 506
    | 507
    | 508
    | 510
    | 511;
  severity: 'debug' | 'log' | 'info' | 'warn' | 'error';
  entityType?: 'user' | 'organization' | 'attachment';
  logId?: string;
  path?: string;
  method?: string;
  timestamp?: string;
  userId?: string;
  organizationId?: string;
};

export type EntityListItemSchema = {
  id: string;
  entityType: 'user' | 'organization';
  slug: string;
  name: string;
  thumbnailUrl?: string | null;
  bannerUrl?: string | null;
  email?: string;
  membership: {
    id: string;
    contextType: 'organization';
    userId: string;
    role: 'member' | 'admin';
    archived: boolean;
    muted: boolean;
    order: number;
    organizationId: string;
  } | null;
};

export type CheckEmailData = {
  body?: {
    email: string;
  };
  path?: never;
  query?: never;
  url: '/auth/check-email';
};

export type CheckEmailErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type CheckEmailError = CheckEmailErrors[keyof CheckEmailErrors];

export type CheckEmailResponses = {
  /**
   * Email exists
   */
  200: boolean;
};

export type CheckEmailResponse = CheckEmailResponses[keyof CheckEmailResponses];

export type SignUpData = {
  body?: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: '/auth/sign-up';
};

export type SignUpErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type SignUpError = SignUpErrors[keyof SignUpErrors];

export type SignUpResponses = {
  /**
   * User signed up
   */
  200: boolean;
};

export type SignUpResponse = SignUpResponses[keyof SignUpResponses];

export type SignUpWithTokenData = {
  body?: {
    email: string;
    password: string;
  };
  path: {
    token: string;
  };
  query?: never;
  url: '/auth/sign-up/{token}';
};

export type SignUpWithTokenErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type SignUpWithTokenError = SignUpWithTokenErrors[keyof SignUpWithTokenErrors];

export type SignUpWithTokenResponses = {
  /**
   * User signed up
   */
  200: boolean;
};

export type SignUpWithTokenResponse = SignUpWithTokenResponses[keyof SignUpWithTokenResponses];

export type SendVerificationEmailData = {
  body?: {
    tokenId?: string;
    userId?: string;
  };
  path?: never;
  query?: never;
  url: '/auth/send-verification-email';
};

export type SendVerificationEmailErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type SendVerificationEmailError = SendVerificationEmailErrors[keyof SendVerificationEmailErrors];

export type SendVerificationEmailResponses = {
  /**
   * Verification email sent
   */
  200: boolean;
};

export type SendVerificationEmailResponse = SendVerificationEmailResponses[keyof SendVerificationEmailResponses];

export type VerifyEmailData = {
  body?: never;
  path: {
    token: string;
  };
  query?: never;
  url: '/auth/verify-email/{token}';
};

export type VerifyEmailErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type VerifyEmailError = VerifyEmailErrors[keyof VerifyEmailErrors];

export type VerifyEmailResponses = {
  /**
   * Verified & session given
   */
  200: boolean;
};

export type VerifyEmailResponse = VerifyEmailResponses[keyof VerifyEmailResponses];

export type RequestPasswordData = {
  body?: {
    email: string;
  };
  path?: never;
  query?: never;
  url: '/auth/request-password';
};

export type RequestPasswordErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type RequestPasswordError = RequestPasswordErrors[keyof RequestPasswordErrors];

export type RequestPasswordResponses = {
  /**
   * Password reset email sent
   */
  200: boolean;
};

export type RequestPasswordResponse = RequestPasswordResponses[keyof RequestPasswordResponses];

export type CreatePasswordData = {
  body?: {
    password: string;
  };
  path: {
    token: string;
  };
  query?: never;
  url: '/auth/create-password/{token}';
};

export type CreatePasswordErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type CreatePasswordError = CreatePasswordErrors[keyof CreatePasswordErrors];

export type CreatePasswordResponses = {
  /**
   * Password created
   */
  200: boolean;
};

export type CreatePasswordResponse = CreatePasswordResponses[keyof CreatePasswordResponses];

export type SignInData = {
  body?: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: '/auth/sign-in';
};

export type SignInErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type SignInError = SignInErrors[keyof SignInErrors];

export type SignInResponses = {
  /**
   * User signed in
   */
  200: boolean;
};

export type SignInResponse = SignInResponses[keyof SignInResponses];

export type CheckTokenData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    type: 'email_verification' | 'password_reset' | 'invitation';
  };
  url: '/auth/check-token/{id}';
};

export type CheckTokenErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type CheckTokenError = CheckTokenErrors[keyof CheckTokenErrors];

export type CheckTokenResponses = {
  /**
   * Token is valid
   */
  200: {
    email: string;
    role: ('member' | 'admin') | null;
    userId?: string;
    organizationName?: string;
    organizationSlug?: string;
    organizationId?: string;
  };
};

export type CheckTokenResponse = CheckTokenResponses[keyof CheckTokenResponses];

export type AcceptEntityInviteData = {
  body?: never;
  path: {
    token: string;
  };
  query?: never;
  url: '/auth/accept-invite/{token}';
};

export type AcceptEntityInviteErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type AcceptEntityInviteError = AcceptEntityInviteErrors[keyof AcceptEntityInviteErrors];

export type AcceptEntityInviteResponses = {
  /**
   * Invitation was accepted
   */
  200: {
    id: string;
    entityType: 'organization';
    slug: string;
    name: string;
    thumbnailUrl?: string | null;
    bannerUrl?: string | null;
    createdAt: string;
    membership: {
      id: string;
      contextType: 'organization';
      userId: string;
      role: 'member' | 'admin';
      archived: boolean;
      muted: boolean;
      order: number;
      organizationId: string;
    };
  };
};

export type AcceptEntityInviteResponse = AcceptEntityInviteResponses[keyof AcceptEntityInviteResponses];

export type StartImpersonationData = {
  body?: never;
  path?: never;
  query: {
    targetUserId: string;
  };
  url: '/auth/impersonation/start';
};

export type StartImpersonationErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type StartImpersonationError = StartImpersonationErrors[keyof StartImpersonationErrors];

export type StartImpersonationResponses = {
  /**
   * Impersonating
   */
  200: boolean;
};

export type StartImpersonationResponse = StartImpersonationResponses[keyof StartImpersonationResponses];

export type StopImpersonationData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/impersonation/stop';
};

export type StopImpersonationErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type StopImpersonationError = StopImpersonationErrors[keyof StopImpersonationErrors];

export type StopImpersonationResponses = {
  /**
   * Stopped impersonating
   */
  200: boolean;
};

export type StopImpersonationResponse = StopImpersonationResponses[keyof StopImpersonationResponses];

export type SignOutData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/sign-out';
};

export type SignOutErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type SignOutError = SignOutErrors[keyof SignOutErrors];

export type SignOutResponses = {
  /**
   * User signed out
   */
  200: boolean;
};

export type SignOutResponse = SignOutResponses[keyof SignOutResponses];

export type GithubSignInData = {
  body?: never;
  path?: never;
  query: {
    type: 'auth' | 'connect' | 'invite';
    redirect?: string;
    connect?: string;
    token?: string;
  };
  url: '/auth/github';
};

export type GithubSignInErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GithubSignInError = GithubSignInErrors[keyof GithubSignInErrors];

export type GoogleSignInData = {
  body?: never;
  path?: never;
  query: {
    type: 'auth' | 'connect' | 'invite';
    redirect?: string;
    connect?: string;
    token?: string;
  };
  url: '/auth/google';
};

export type GoogleSignInErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GoogleSignInError = GoogleSignInErrors[keyof GoogleSignInErrors];

export type MicrosoftSignInData = {
  body?: never;
  path?: never;
  query: {
    type: 'auth' | 'connect' | 'invite';
    redirect?: string;
    connect?: string;
    token?: string;
  };
  url: '/auth/microsoft';
};

export type MicrosoftSignInErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type MicrosoftSignInError = MicrosoftSignInErrors[keyof MicrosoftSignInErrors];

export type GithubSignInCallbackData = {
  body?: never;
  path?: never;
  query: {
    code: string;
    state: string;
    error?: string;
    error_description?: string;
    error_uri?: string;
  };
  url: '/auth/github/callback';
};

export type GithubSignInCallbackErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GithubSignInCallbackError = GithubSignInCallbackErrors[keyof GithubSignInCallbackErrors];

export type GoogleSignInCallbackData = {
  body?: never;
  path?: never;
  query: {
    code: string;
    state: string;
  };
  url: '/auth/google/callback';
};

export type GoogleSignInCallbackErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GoogleSignInCallbackError = GoogleSignInCallbackErrors[keyof GoogleSignInCallbackErrors];

export type MicrosoftSignInCallbackData = {
  body?: never;
  path?: never;
  query: {
    code: string;
    state: string;
  };
  url: '/auth/microsoft/callback';
};

export type MicrosoftSignInCallbackErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type MicrosoftSignInCallbackError = MicrosoftSignInCallbackErrors[keyof MicrosoftSignInCallbackErrors];

export type GetPasskeyChallengeData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/passkey-challenge';
};

export type GetPasskeyChallengeErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetPasskeyChallengeError = GetPasskeyChallengeErrors[keyof GetPasskeyChallengeErrors];

export type GetPasskeyChallengeResponses = {
  /**
   * Challenge created
   */
  200: {
    challengeBase64: string;
  };
};

export type GetPasskeyChallengeResponse = GetPasskeyChallengeResponses[keyof GetPasskeyChallengeResponses];

export type SignInWithPasskeyData = {
  body?: {
    clientDataJSON: string;
    authenticatorData: string;
    signature: string;
    userEmail: string;
  };
  path?: never;
  query?: never;
  url: '/auth/passkey-verification';
};

export type SignInWithPasskeyErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type SignInWithPasskeyError = SignInWithPasskeyErrors[keyof SignInWithPasskeyErrors];

export type SignInWithPasskeyResponses = {
  /**
   * Passkey verified
   */
  200: boolean;
};

export type SignInWithPasskeyResponse = SignInWithPasskeyResponses[keyof SignInWithPasskeyResponses];

export type DeleteMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/me';
};

export type DeleteMeErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeleteMeError = DeleteMeErrors[keyof DeleteMeErrors];

export type DeleteMeResponses = {
  /**
   * User deleted
   */
  200: boolean;
};

export type DeleteMeResponse = DeleteMeResponses[keyof DeleteMeResponses];

export type GetMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/me';
};

export type GetMeErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetMeError = GetMeErrors[keyof GetMeErrors];

export type GetMeResponses = {
  /**
   * User
   */
  200: {
    id: string;
    entityType: 'user';
    name: string;
    description: string | null;
    slug: string;
    thumbnailUrl: string | null;
    bannerUrl: string | null;
    email: string;
    firstName: string | null;
    lastName: string | null;
    language: 'en' | 'nl';
    newsletter: boolean;
    role: 'user' | 'admin';
    createdAt: string;
    modifiedAt: string | null;
    lastSeenAt: string | null;
    lastStartedAt: string | null;
    lastSignInAt: string | null;
    modifiedBy: string | null;
  };
};

export type GetMeResponse = GetMeResponses[keyof GetMeResponses];

export type UpdateMeData = {
  body?: {
    bannerUrl?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    language?: 'en' | 'nl';
    newsletter?: boolean;
    thumbnailUrl?: string | null;
    slug?: string;
  };
  path?: never;
  query?: never;
  url: '/me';
};

export type UpdateMeErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type UpdateMeError = UpdateMeErrors[keyof UpdateMeErrors];

export type UpdateMeResponses = {
  /**
   * User
   */
  200: {
    id: string;
    entityType: 'user';
    name: string;
    description: string | null;
    slug: string;
    thumbnailUrl: string | null;
    bannerUrl: string | null;
    email: string;
    firstName: string | null;
    lastName: string | null;
    language: 'en' | 'nl';
    newsletter: boolean;
    role: 'user' | 'admin';
    createdAt: string;
    modifiedAt: string | null;
    lastSeenAt: string | null;
    lastStartedAt: string | null;
    lastSignInAt: string | null;
    modifiedBy: string | null;
  };
};

export type UpdateMeResponse = UpdateMeResponses[keyof UpdateMeResponses];

export type GetMyAuthData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/me/auth';
};

export type GetMyAuthErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetMyAuthError = GetMyAuthErrors[keyof GetMyAuthErrors];

export type GetMyAuthResponses = {
  /**
   * User sign-up info
   */
  200: {
    oauth: Array<'github'>;
    passkey: boolean;
    sessions: Array<{
      id: string;
      type: 'regular' | 'impersonation';
      userId: string;
      deviceName: string | null;
      deviceType: 'desktop' | 'mobile';
      deviceOs: string | null;
      browser: string | null;
      authStrategy: 'github' | 'google' | 'microsoft' | 'password' | 'passkey' | 'email';
      createdAt: string;
      expiresAt: string;
      isCurrent: boolean;
    }>;
  };
};

export type GetMyAuthResponse = GetMyAuthResponses[keyof GetMyAuthResponses];

export type GetMyMenuData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/me/menu';
};

export type GetMyMenuErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetMyMenuError = GetMyMenuErrors[keyof GetMyMenuErrors];

export type GetMyMenuResponses = {
  /**
   * Menu of user
   */
  200: {
    organization: Array<{
      id: string;
      entityType: 'organization';
      slug: string;
      name: string;
      thumbnailUrl?: string | null;
      createdAt: string;
      modifiedAt: string | null;
      membership: {
        id: string;
        contextType: 'organization';
        userId: string;
        role: 'member' | 'admin';
        archived: boolean;
        muted: boolean;
        order: number;
        organizationId: string;
      };
      organizationId?: string;
      submenu?: Array<{
        id: string;
        entityType: 'organization';
        slug: string;
        name: string;
        thumbnailUrl?: string | null;
        createdAt: string;
        modifiedAt: string | null;
        membership: {
          id: string;
          contextType: 'organization';
          userId: string;
          role: 'member' | 'admin';
          archived: boolean;
          muted: boolean;
          order: number;
          organizationId: string;
        };
        organizationId?: string;
      }>;
    }>;
  };
};

export type GetMyMenuResponse = GetMyMenuResponses[keyof GetMyMenuResponses];

export type DeleteMySessionsData = {
  body?: {
    ids: Array<string>;
  };
  path?: never;
  query?: never;
  url: '/me/sessions';
};

export type DeleteMySessionsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeleteMySessionsError = DeleteMySessionsErrors[keyof DeleteMySessionsErrors];

export type DeleteMySessionsResponses = {
  /**
   * Success
   */
  200: {
    success: boolean;
    rejectedIds: Array<string>;
  };
};

export type DeleteMySessionsResponse = DeleteMySessionsResponses[keyof DeleteMySessionsResponses];

export type DeleteMyMembershipData = {
  body?: never;
  path?: never;
  query: {
    idOrSlug: string;
    entityType: 'organization';
  };
  url: '/me/leave';
};

export type DeleteMyMembershipErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeleteMyMembershipError = DeleteMyMembershipErrors[keyof DeleteMyMembershipErrors];

export type DeleteMyMembershipResponses = {
  /**
   * Membership removed
   */
  200: boolean;
};

export type DeleteMyMembershipResponse = DeleteMyMembershipResponses[keyof DeleteMyMembershipResponses];

export type DeletePasskeyData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/me/passkey';
};

export type DeletePasskeyErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeletePasskeyError = DeletePasskeyErrors[keyof DeletePasskeyErrors];

export type DeletePasskeyResponses = {
  /**
   * Passkey removed
   */
  200: boolean;
};

export type DeletePasskeyResponse = DeletePasskeyResponses[keyof DeletePasskeyResponses];

export type CreatePasskeyData = {
  body: {
    attestationObject: string;
    clientDataJSON: string;
  };
  path?: never;
  query?: never;
  url: '/me/passkey';
};

export type CreatePasskeyErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type CreatePasskeyError = CreatePasskeyErrors[keyof CreatePasskeyErrors];

export type CreatePasskeyResponses = {
  /**
   * Passkey created
   */
  200: boolean;
};

export type CreatePasskeyResponse = CreatePasskeyResponses[keyof CreatePasskeyResponses];

export type GetUploadTokenData = {
  body?: never;
  path?: never;
  query: {
    public?: string | boolean;
    organizationId?: string;
    templateId: 'avatar' | 'cover' | 'attachment';
  };
  url: '/me/upload-token';
};

export type GetUploadTokenErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetUploadTokenError = GetUploadTokenErrors[keyof GetUploadTokenErrors];

export type GetUploadTokenResponses = {
  /**
   * Upload token with a scope for a user or organization
   */
  200: {
    public: boolean;
    sub: string;
    s3: boolean;
    signature: string;
    params: {
      auth: {
        key: string;
        expires?: string;
      };
      [key: string]:
        | unknown
        | {
            key: string;
            expires?: string;
          };
    };
  };
};

export type GetUploadTokenResponse = GetUploadTokenResponses[keyof GetUploadTokenResponses];

export type UnsubscribeMeData = {
  body?: never;
  path?: never;
  query: {
    token: string;
  };
  url: '/me/unsubscribe';
};

export type UnsubscribeMeErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type UnsubscribeMeError = UnsubscribeMeErrors[keyof UnsubscribeMeErrors];

export type DeleteUsersData = {
  body?: {
    ids: Array<string>;
  };
  path?: never;
  query?: never;
  url: '/users';
};

export type DeleteUsersErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeleteUsersError = DeleteUsersErrors[keyof DeleteUsersErrors];

export type DeleteUsersResponses = {
  /**
   * Success
   */
  200: {
    success: boolean;
    rejectedIds: Array<string>;
  };
};

export type DeleteUsersResponse = DeleteUsersResponses[keyof DeleteUsersResponses];

export type GetUsersData = {
  body?: never;
  path?: never;
  query: {
    q?: string;
    sort?: 'id' | 'name' | 'email' | 'role' | 'createdAt' | 'lastSeenAt' | 'membershipCount';
    order?: 'asc' | 'desc';
    offset: string;
    limit: string;
    role?: 'user' | 'admin';
  };
  url: '/users';
};

export type GetUsersErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
  /**
   * Users
   */
  200: {
    items: Array<{
      id: string;
      entityType: 'user';
      name: string;
      description: string | null;
      slug: string;
      thumbnailUrl: string | null;
      bannerUrl: string | null;
      email: string;
      firstName: string | null;
      lastName: string | null;
      language: 'en' | 'nl';
      newsletter: boolean;
      role: 'user' | 'admin';
      createdAt: string;
      modifiedAt: string | null;
      lastSeenAt: string | null;
      lastStartedAt: string | null;
      lastSignInAt: string | null;
      modifiedBy: string | null;
    }>;
    total: number;
  };
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type GetUserData = {
  body?: never;
  path: {
    idOrSlug: string;
  };
  query?: never;
  url: '/users/{idOrSlug}';
};

export type GetUserErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
  /**
   * User
   */
  200: {
    id: string;
    entityType: 'user';
    name: string;
    description: string | null;
    slug: string;
    thumbnailUrl: string | null;
    bannerUrl: string | null;
    email: string;
    firstName: string | null;
    lastName: string | null;
    language: 'en' | 'nl';
    newsletter: boolean;
    role: 'user' | 'admin';
    createdAt: string;
    modifiedAt: string | null;
    lastSeenAt: string | null;
    lastStartedAt: string | null;
    lastSignInAt: string | null;
    modifiedBy: string | null;
  };
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
  body?: {
    bannerUrl?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    language?: 'en' | 'nl';
    newsletter?: boolean;
    thumbnailUrl?: string | null;
    slug?: string;
  };
  path: {
    idOrSlug: string;
  };
  query?: never;
  url: '/users/{idOrSlug}';
};

export type UpdateUserErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
  /**
   * User
   */
  200: {
    id: string;
    entityType: 'user';
    name: string;
    description: string | null;
    slug: string;
    thumbnailUrl: string | null;
    bannerUrl: string | null;
    email: string;
    firstName: string | null;
    lastName: string | null;
    language: 'en' | 'nl';
    newsletter: boolean;
    role: 'user' | 'admin';
    createdAt: string;
    modifiedAt: string | null;
    lastSeenAt: string | null;
    lastStartedAt: string | null;
    lastSignInAt: string | null;
    modifiedBy: string | null;
  };
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type DeleteOrganizationsData = {
  body?: {
    ids: Array<string>;
  };
  path?: never;
  query?: never;
  url: '/organizations';
};

export type DeleteOrganizationsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeleteOrganizationsError = DeleteOrganizationsErrors[keyof DeleteOrganizationsErrors];

export type DeleteOrganizationsResponses = {
  /**
   * Success
   */
  200: {
    success: boolean;
    rejectedIds: Array<string>;
  };
};

export type DeleteOrganizationsResponse = DeleteOrganizationsResponses[keyof DeleteOrganizationsResponses];

export type GetOrganizationsData = {
  body?: never;
  path?: never;
  query: {
    q?: string;
    sort?: 'id' | 'name' | 'userRole' | 'createdAt';
    order?: 'asc' | 'desc';
    offset: string;
    limit: string;
  };
  url: '/organizations';
};

export type GetOrganizationsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetOrganizationsError = GetOrganizationsErrors[keyof GetOrganizationsErrors];

export type GetOrganizationsResponses = {
  /**
   * Organizations
   */
  200: {
    items: Array<{
      id: string;
      entityType: 'organization';
      name: string;
      description: string | null;
      slug: string;
      thumbnailUrl: string | null;
      bannerUrl: string | null;
      shortName: string | null;
      country: string | null;
      timezone: string | null;
      defaultLanguage: 'en' | 'nl';
      languages: Array<'en' | 'nl'>;
      notificationEmail: string | null;
      emailDomains: Array<string>;
      color: string | null;
      logoUrl: string | null;
      websiteUrl: string | null;
      welcomeText: string | null;
      authStrategies: Array<'github' | 'google' | 'microsoft' | 'password' | 'passkey' | 'email'>;
      chatSupport: boolean;
      createdAt: string;
      createdBy: string | null;
      modifiedAt: string | null;
      modifiedBy: string | null;
      membership: {
        id: string;
        contextType: 'organization';
        userId: string;
        role: 'member' | 'admin';
        archived: boolean;
        muted: boolean;
        order: number;
        organizationId: string;
      } | null;
      counts: {
        membership: {
          admin: number;
          member: number;
          pending: number;
          total: number;
        };
        related: {
          attachment: number;
        };
      };
    }>;
    total: number;
  };
};

export type GetOrganizationsResponse = GetOrganizationsResponses[keyof GetOrganizationsResponses];

export type CreateOrganizationData = {
  body: {
    name: string;
    slug: string;
  };
  path?: never;
  query?: never;
  url: '/organizations';
};

export type CreateOrganizationErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type CreateOrganizationError = CreateOrganizationErrors[keyof CreateOrganizationErrors];

export type CreateOrganizationResponses = {
  /**
   * Organization was created
   */
  200: {
    id: string;
    entityType: 'organization';
    name: string;
    description: string | null;
    slug: string;
    thumbnailUrl: string | null;
    bannerUrl: string | null;
    shortName: string | null;
    country: string | null;
    timezone: string | null;
    defaultLanguage: 'en' | 'nl';
    languages: Array<'en' | 'nl'>;
    notificationEmail: string | null;
    emailDomains: Array<string>;
    color: string | null;
    logoUrl: string | null;
    websiteUrl: string | null;
    welcomeText: string | null;
    authStrategies: Array<'github' | 'google' | 'microsoft' | 'password' | 'passkey' | 'email'>;
    chatSupport: boolean;
    createdAt: string;
    createdBy: string | null;
    modifiedAt: string | null;
    modifiedBy: string | null;
    membership: {
      id: string;
      contextType: 'organization';
      userId: string;
      role: 'member' | 'admin';
      archived: boolean;
      muted: boolean;
      order: number;
      organizationId: string;
    };
    invitesCount: number;
  };
};

export type CreateOrganizationResponse = CreateOrganizationResponses[keyof CreateOrganizationResponses];

export type GetOrganizationData = {
  body?: never;
  path: {
    idOrSlug: string;
  };
  query?: never;
  url: '/organizations/{idOrSlug}';
};

export type GetOrganizationErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetOrganizationError = GetOrganizationErrors[keyof GetOrganizationErrors];

export type GetOrganizationResponses = {
  /**
   * Organization
   */
  200: {
    id: string;
    entityType: 'organization';
    name: string;
    description: string | null;
    slug: string;
    thumbnailUrl: string | null;
    bannerUrl: string | null;
    shortName: string | null;
    country: string | null;
    timezone: string | null;
    defaultLanguage: 'en' | 'nl';
    languages: Array<'en' | 'nl'>;
    notificationEmail: string | null;
    emailDomains: Array<string>;
    color: string | null;
    logoUrl: string | null;
    websiteUrl: string | null;
    welcomeText: string | null;
    authStrategies: Array<'github' | 'google' | 'microsoft' | 'password' | 'passkey' | 'email'>;
    chatSupport: boolean;
    createdAt: string;
    createdBy: string | null;
    modifiedAt: string | null;
    modifiedBy: string | null;
    membership: {
      id: string;
      contextType: 'organization';
      userId: string;
      role: 'member' | 'admin';
      archived: boolean;
      muted: boolean;
      order: number;
      organizationId: string;
    } | null;
    invitesCount: number;
  };
};

export type GetOrganizationResponse = GetOrganizationResponses[keyof GetOrganizationResponses];

export type UpdateOrganizationData = {
  body?: {
    slug?: string;
    name?: string;
    shortName?: string | null;
    country?: string | null;
    timezone?: string | null;
    defaultLanguage?: 'en' | 'nl';
    languages?: Array<'en' | 'nl'>;
    notificationEmail?: string | null;
    emailDomains?: Array<string>;
    color?: string | null;
    thumbnailUrl?: string | null;
    logoUrl?: string | null;
    bannerUrl?: string | null;
    websiteUrl?: string | null;
    welcomeText?: string | null;
    authStrategies?: Array<'github' | 'google' | 'microsoft' | 'password' | 'passkey' | 'email'>;
    chatSupport?: boolean;
  };
  path: {
    idOrSlug: string;
  };
  query?: never;
  url: '/organizations/{idOrSlug}';
};

export type UpdateOrganizationErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type UpdateOrganizationError = UpdateOrganizationErrors[keyof UpdateOrganizationErrors];

export type UpdateOrganizationResponses = {
  /**
   * Organization was updated
   */
  200: {
    id: string;
    entityType: 'organization';
    name: string;
    description: string | null;
    slug: string;
    thumbnailUrl: string | null;
    bannerUrl: string | null;
    shortName: string | null;
    country: string | null;
    timezone: string | null;
    defaultLanguage: 'en' | 'nl';
    languages: Array<'en' | 'nl'>;
    notificationEmail: string | null;
    emailDomains: Array<string>;
    color: string | null;
    logoUrl: string | null;
    websiteUrl: string | null;
    welcomeText: string | null;
    authStrategies: Array<'github' | 'google' | 'microsoft' | 'password' | 'passkey' | 'email'>;
    chatSupport: boolean;
    createdAt: string;
    createdBy: string | null;
    modifiedAt: string | null;
    modifiedBy: string | null;
    membership: {
      id: string;
      contextType: 'organization';
      userId: string;
      role: 'member' | 'admin';
      archived: boolean;
      muted: boolean;
      order: number;
      organizationId: string;
    } | null;
    invitesCount: number;
  };
};

export type UpdateOrganizationResponse = UpdateOrganizationResponses[keyof UpdateOrganizationResponses];

export type GetPageEntitiesData = {
  body?: never;
  path?: never;
  query?: {
    q?: string;
    targetUserId?: string;
    type?: 'user' | 'organization';
    targetOrgId?: string;
    userMembershipType?: 'organization';
  };
  url: '/entities/page';
};

export type GetPageEntitiesErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetPageEntitiesError = GetPageEntitiesErrors[keyof GetPageEntitiesErrors];

export type GetPageEntitiesResponses = {
  /**
   * Page entities
   */
  200: {
    items: Array<{
      id: string;
      entityType: 'user' | 'organization';
      slug: string;
      name: string;
      thumbnailUrl?: string | null;
      bannerUrl?: string | null;
      email?: string;
      membership: {
        id: string;
        contextType: 'organization';
        userId: string;
        role: 'member' | 'admin';
        archived: boolean;
        muted: boolean;
        order: number;
        organizationId: string;
      } | null;
    }>;
    counts: {
      user?: number;
      organization?: number;
      attachment?: number;
    };
    total: number;
  };
};

export type GetPageEntitiesResponse = GetPageEntitiesResponses[keyof GetPageEntitiesResponses];

export type GetEntitiesWithAdminsData = {
  body?: never;
  path?: never;
  query: {
    q?: string;
    targetUserId?: string;
    roles?: Array<'member' | 'admin'> | null;
    type: 'organization';
    sort?: 'name' | 'createdAt';
  };
  url: '/entities/context';
};

export type GetEntitiesWithAdminsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetEntitiesWithAdminsError = GetEntitiesWithAdminsErrors[keyof GetEntitiesWithAdminsErrors];

export type GetEntitiesWithAdminsResponses = {
  /**
   * Context entities
   */
  200: Array<{
    id: string;
    entityType: 'organization';
    slug: string;
    name: string;
    thumbnailUrl?: string | null;
    bannerUrl?: string | null;
    createdAt: string;
    membership: {
      id: string;
      contextType: 'organization';
      userId: string;
      role: 'member' | 'admin';
      archived: boolean;
      muted: boolean;
      order: number;
      organizationId: string;
    };
    admins: Array<{
      id: string;
      entityType: 'user';
      slug: string;
      name: string;
      thumbnailUrl?: string | null;
      bannerUrl?: string | null;
      email: string;
    }>;
  }>;
};

export type GetEntitiesWithAdminsResponse = GetEntitiesWithAdminsResponses[keyof GetEntitiesWithAdminsResponses];

export type CheckSlugData = {
  body?: {
    slug: string;
    entityType: 'user' | 'organization' | 'attachment';
  };
  path?: never;
  query?: never;
  url: '/entities/check-slug';
};

export type CheckSlugErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type CheckSlugError = CheckSlugErrors[keyof CheckSlugErrors];

export type CheckSlugResponses = {
  /**
   * Slug is available
   */
  200: boolean;
};

export type CheckSlugResponse = CheckSlugResponses[keyof CheckSlugResponses];

export type SystemInviteData = {
  body?: {
    emails: Array<string>;
  };
  path?: never;
  query?: never;
  url: '/system/invite';
};

export type SystemInviteErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type SystemInviteError = SystemInviteErrors[keyof SystemInviteErrors];

export type SystemInviteResponses = {
  /**
   * Invitations are sent
   */
  200: boolean;
};

export type SystemInviteResponse = SystemInviteResponses[keyof SystemInviteResponses];

export type GetPresignedUrlData = {
  body?: never;
  path?: never;
  query: {
    key: string;
  };
  url: '/system/presigned-url';
};

export type GetPresignedUrlErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetPresignedUrlError = GetPresignedUrlErrors[keyof GetPresignedUrlErrors];

export type GetPresignedUrlResponses = {
  /**
   * Presigned URL
   */
  200: string;
};

export type GetPresignedUrlResponse = GetPresignedUrlResponses[keyof GetPresignedUrlResponses];

export type PaddleWebhookData = {
  body?: unknown;
  path?: never;
  query?: never;
  url: '/system/paddle-webhook';
};

export type PaddleWebhookErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type PaddleWebhookError = PaddleWebhookErrors[keyof PaddleWebhookErrors];

export type PaddleWebhookResponses = {
  /**
   * Paddle webhook received
   */
  200: boolean;
};

export type PaddleWebhookResponse = PaddleWebhookResponses[keyof PaddleWebhookResponses];

export type SendNewsletterData = {
  body: {
    organizationIds: Array<string>;
    roles: Array<'member' | 'admin'>;
    subject: string;
    content: string;
  };
  path?: never;
  query?: {
    toSelf?: string | boolean;
  };
  url: '/system/newsletter';
};

export type SendNewsletterErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type SendNewsletterError = SendNewsletterErrors[keyof SendNewsletterErrors];

export type SendNewsletterResponses = {
  /**
   * Organization
   */
  200: boolean;
};

export type SendNewsletterResponse = SendNewsletterResponses[keyof SendNewsletterResponses];

export type DeleteRequestsData = {
  body?: {
    ids: Array<string>;
  };
  path?: never;
  query?: never;
  url: '/requests';
};

export type DeleteRequestsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeleteRequestsError = DeleteRequestsErrors[keyof DeleteRequestsErrors];

export type DeleteRequestsResponses = {
  /**
   * Requests
   */
  200: boolean;
};

export type DeleteRequestsResponse = DeleteRequestsResponses[keyof DeleteRequestsResponses];

export type GetRequestsData = {
  body?: never;
  path?: never;
  query: {
    q?: string;
    sort?: 'id' | 'email' | 'type' | 'createdAt';
    order?: 'asc' | 'desc';
    offset: string;
    limit: string;
  };
  url: '/requests';
};

export type GetRequestsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetRequestsError = GetRequestsErrors[keyof GetRequestsErrors];

export type GetRequestsResponses = {
  /**
   * Requests
   */
  200: {
    items: Array<{
      id: string;
      message: string | null;
      email: string;
      type: 'waitlist' | 'newsletter' | 'contact';
      createdAt: string;
      wasInvited: boolean;
    }>;
    total: number;
  };
};

export type GetRequestsResponse = GetRequestsResponses[keyof GetRequestsResponses];

export type CreateRequestData = {
  body?: {
    email: string;
    type: 'waitlist' | 'newsletter' | 'contact';
    message: string | null;
  };
  path?: never;
  query?: never;
  url: '/requests';
};

export type CreateRequestErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type CreateRequestError = CreateRequestErrors[keyof CreateRequestErrors];

export type CreateRequestResponses = {
  /**
   * Requests
   */
  200: {
    id: string;
    message: string | null;
    email: string;
    type: 'waitlist' | 'newsletter' | 'contact';
    createdAt: string;
    wasInvited: boolean;
  };
};

export type CreateRequestResponse = CreateRequestResponses[keyof CreateRequestResponses];

export type GetMetricsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/metrics';
};

export type GetMetricsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetMetricsError = GetMetricsErrors[keyof GetMetricsErrors];

export type GetMetricsResponses = {
  /**
   * Metrics
   */
  200: Array<{
    date: string;
    count: number;
  }>;
};

export type GetMetricsResponse = GetMetricsResponses[keyof GetMetricsResponses];

export type GetPublicCountsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/metrics/public';
};

export type GetPublicCountsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetPublicCountsError = GetPublicCountsErrors[keyof GetPublicCountsErrors];

export type GetPublicCountsResponses = {
  /**
   * Public counts
   */
  200: {
    user: number;
    organization: number;
    attachment: number;
  };
};

export type GetPublicCountsResponse = GetPublicCountsResponses[keyof GetPublicCountsResponses];

export type ShapeProxyData = {
  body?: never;
  path: {
    orgIdOrSlug: string;
  };
  query?: never;
  url: '/{orgIdOrSlug}/attachments/shape-proxy';
};

export type ShapeProxyErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type ShapeProxyError = ShapeProxyErrors[keyof ShapeProxyErrors];

export type ShapeProxyResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type DeleteAttachmentsData = {
  body?: {
    ids: Array<string>;
  };
  path: {
    orgIdOrSlug: string;
  };
  query?: never;
  url: '/{orgIdOrSlug}/attachments';
};

export type DeleteAttachmentsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeleteAttachmentsError = DeleteAttachmentsErrors[keyof DeleteAttachmentsErrors];

export type DeleteAttachmentsResponses = {
  /**
   * Success
   */
  200: {
    success: boolean;
    rejectedIds: Array<string>;
  };
};

export type DeleteAttachmentsResponse = DeleteAttachmentsResponses[keyof DeleteAttachmentsResponses];

export type GetAttachmentsData = {
  body?: never;
  path: {
    orgIdOrSlug: string;
  };
  query: {
    q?: string;
    sort?: 'id' | 'filename' | 'contentType' | 'createdAt';
    order?: 'asc' | 'desc';
    offset: string;
    limit: string;
    attachmentId?: string;
  };
  url: '/{orgIdOrSlug}/attachments';
};

export type GetAttachmentsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetAttachmentsError = GetAttachmentsErrors[keyof GetAttachmentsErrors];

export type GetAttachmentsResponses = {
  /**
   * Attachments
   */
  200: {
    items: Array<{
      id: string;
      name: string;
      entityType: 'attachment';
      groupId: string | null;
      filename: string;
      contentType: string;
      convertedContentType: string | null;
      size: string;
      createdAt: string;
      createdBy: string | null;
      modifiedAt: string | null;
      modifiedBy: string | null;
      organizationId: string;
      url: string;
      thumbnailUrl: string | null;
      convertedUrl: string | null;
    }>;
    total: number;
  };
};

export type GetAttachmentsResponse = GetAttachmentsResponses[keyof GetAttachmentsResponses];

export type CreateAttachmentData = {
  body: Array<{
    id?: string;
    groupId?: string | null;
    filename: string;
    contentType: string;
    convertedContentType?: string | null;
    size: string;
    originalKey: string;
    convertedKey?: string | null;
    thumbnailKey?: string | null;
    organizationId: string;
  }>;
  path: {
    orgIdOrSlug: string;
  };
  query?: never;
  url: '/{orgIdOrSlug}/attachments';
};

export type CreateAttachmentErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type CreateAttachmentError = CreateAttachmentErrors[keyof CreateAttachmentErrors];

export type CreateAttachmentResponses = {
  /**
   * Attachment
   */
  200: Array<{
    id: string;
    name: string;
    entityType: 'attachment';
    groupId: string | null;
    filename: string;
    contentType: string;
    convertedContentType: string | null;
    size: string;
    createdAt: string;
    createdBy: string | null;
    modifiedAt: string | null;
    modifiedBy: string | null;
    organizationId: string;
    url: string;
    thumbnailUrl: string | null;
    convertedUrl: string | null;
  }>;
};

export type CreateAttachmentResponse = CreateAttachmentResponses[keyof CreateAttachmentResponses];

export type GetAttachmentData = {
  body?: never;
  path: {
    id: string;
    orgIdOrSlug: string;
  };
  query?: never;
  url: '/{orgIdOrSlug}/attachments/{id}';
};

export type GetAttachmentErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetAttachmentError = GetAttachmentErrors[keyof GetAttachmentErrors];

export type GetAttachmentResponses = {
  /**
   * Attachment
   */
  200: {
    id: string;
    name: string;
    entityType: 'attachment';
    groupId: string | null;
    filename: string;
    contentType: string;
    convertedContentType: string | null;
    size: string;
    createdAt: string;
    createdBy: string | null;
    modifiedAt: string | null;
    modifiedBy: string | null;
    organizationId: string;
    url: string;
    thumbnailUrl: string | null;
    convertedUrl: string | null;
  };
};

export type GetAttachmentResponse = GetAttachmentResponses[keyof GetAttachmentResponses];

export type UpdateAttachmentData = {
  body?: {
    name?: string;
    originalKey?: string;
  };
  path: {
    id: string;
    orgIdOrSlug: string;
  };
  query?: never;
  url: '/{orgIdOrSlug}/attachments/{id}';
};

export type UpdateAttachmentErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type UpdateAttachmentError = UpdateAttachmentErrors[keyof UpdateAttachmentErrors];

export type UpdateAttachmentResponses = {
  /**
   * Attachment was updated
   */
  200: {
    id: string;
    name: string;
    entityType: 'attachment';
    groupId: string | null;
    filename: string;
    contentType: string;
    convertedContentType: string | null;
    size: string;
    createdAt: string;
    createdBy: string | null;
    modifiedAt: string | null;
    modifiedBy: string | null;
    organizationId: string;
    url: string;
    thumbnailUrl: string | null;
    convertedUrl: string | null;
  };
};

export type UpdateAttachmentResponse = UpdateAttachmentResponses[keyof UpdateAttachmentResponses];

export type GetAttachmentCoverData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/{orgIdOrSlug}/attachments/{id}/cover';
};

export type GetAttachmentCoverErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetAttachmentCoverError = GetAttachmentCoverErrors[keyof GetAttachmentCoverErrors];

export type GetAttachmentCoverResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type RedirectToAttachmentData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/{orgIdOrSlug}/attachments/{id}/link';
};

export type RedirectToAttachmentErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type RedirectToAttachmentError = RedirectToAttachmentErrors[keyof RedirectToAttachmentErrors];

export type RedirectToAttachmentResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type DeleteMembershipsData = {
  body?: {
    ids: Array<string>;
  };
  path: {
    orgIdOrSlug: string;
  };
  query: {
    idOrSlug: string;
    entityType: 'organization';
  };
  url: '/{orgIdOrSlug}/memberships';
};

export type DeleteMembershipsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type DeleteMembershipsError = DeleteMembershipsErrors[keyof DeleteMembershipsErrors];

export type DeleteMembershipsResponses = {
  /**
   * Success
   */
  200: {
    success: boolean;
    rejectedIds: Array<string>;
  };
};

export type DeleteMembershipsResponse = DeleteMembershipsResponses[keyof DeleteMembershipsResponses];

export type MembershipInviteData = {
  body?: {
    emails: Array<string>;
    role: 'member' | 'admin';
  };
  path: {
    orgIdOrSlug: string;
  };
  query: {
    idOrSlug: string;
    entityType: 'organization';
  };
  url: '/{orgIdOrSlug}/memberships';
};

export type MembershipInviteErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type MembershipInviteError = MembershipInviteErrors[keyof MembershipInviteErrors];

export type MembershipInviteResponses = {
  /**
   * Number of sended invitations
   */
  200: number;
};

export type MembershipInviteResponse = MembershipInviteResponses[keyof MembershipInviteResponses];

export type UpdateMembershipData = {
  body?: {
    role?: 'member' | 'admin';
    muted?: boolean;
    archived?: boolean;
    order?: number;
  };
  path: {
    id: string;
    orgIdOrSlug: string;
  };
  query?: never;
  url: '/{orgIdOrSlug}/memberships/{id}';
};

export type UpdateMembershipErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type UpdateMembershipError = UpdateMembershipErrors[keyof UpdateMembershipErrors];

export type UpdateMembershipResponses = {
  /**
   * Membership updated
   */
  200: {
    id: string;
    contextType: 'organization';
    userId: string;
    role: 'member' | 'admin';
    createdAt: string;
    createdBy: string | null;
    modifiedAt: string | null;
    modifiedBy: string | null;
    archived: boolean;
    muted: boolean;
    order: number;
    organizationId: string;
  };
};

export type UpdateMembershipResponse = UpdateMembershipResponses[keyof UpdateMembershipResponses];

export type GetMembersData = {
  body?: never;
  path?: {
    orgIdOrSlug?: string;
  };
  query: {
    q?: string;
    sort?: 'id' | 'name' | 'email' | 'role' | 'createdAt' | 'lastSeenAt';
    order?: 'asc' | 'desc';
    offset: string;
    limit: string;
    idOrSlug: string;
    entityType: 'organization';
    role?: 'member' | 'admin';
  };
  url: '/{orgIdOrSlug}/memberships/members';
};

export type GetMembersErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetMembersError = GetMembersErrors[keyof GetMembersErrors];

export type GetMembersResponses = {
  /**
   * Members
   */
  200: {
    items: Array<{
      id: string;
      entityType: 'user';
      name: string;
      description: string | null;
      slug: string;
      thumbnailUrl: string | null;
      bannerUrl: string | null;
      email: string;
      firstName: string | null;
      lastName: string | null;
      language: 'en' | 'nl';
      newsletter: boolean;
      role: 'user' | 'admin';
      createdAt: string;
      modifiedAt: string | null;
      lastSeenAt: string | null;
      lastStartedAt: string | null;
      lastSignInAt: string | null;
      modifiedBy: string | null;
      membership: {
        id: string;
        contextType: 'organization';
        userId: string;
        role: 'member' | 'admin';
        archived: boolean;
        muted: boolean;
        order: number;
        organizationId: string;
      };
    }>;
    total: number;
  };
};

export type GetMembersResponse = GetMembersResponses[keyof GetMembersResponses];

export type GetPendingInvitationsData = {
  body?: never;
  path: {
    orgIdOrSlug: string;
  };
  query: {
    q?: string;
    sort?: 'email' | 'role' | 'expiresAt' | 'createdAt' | 'createdBy';
    order?: 'asc' | 'desc';
    offset: string;
    limit: string;
    idOrSlug: string;
    entityType: 'organization';
  };
  url: '/{orgIdOrSlug}/memberships/pending';
};

export type GetPendingInvitationsErrors = {
  /**
   * Bad request: problem processing request.
   */
  400: ApiError;
  /**
   * Unauthorized: authentication required.
   */
  401: ApiError;
  /**
   * Forbidden: insufficient permissions.
   */
  403: ApiError;
  /**
   * Not found: resource does not exist.
   */
  404: ApiError;
  /**
   * Rate limit: too many requests.
   */
  429: ApiError;
};

export type GetPendingInvitationsError = GetPendingInvitationsErrors[keyof GetPendingInvitationsErrors];

export type GetPendingInvitationsResponses = {
  /**
   * Invited members
   */
  200: {
    items: Array<{
      id: string;
      email: string;
      createdAt: string;
      createdBy: string | null;
      role: 'member' | 'admin';
      expiresAt: string;
      name: string | null;
    }>;
    total: number;
  };
};

export type GetPendingInvitationsResponse = GetPendingInvitationsResponses[keyof GetPendingInvitationsResponses];

export type ClientOptions = {
  baseUrl: 'http://localhost:4000' | (string & {});
};
