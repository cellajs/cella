name: CI

# Controls which events and branches will trigger the workflow
on:
  push:
    branches: [ git-actions ]
  pull_request:
    branches: [ git-actions ]

# Cancel older runs of the same PR when a new push arrives
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Install deps once and reuse for other jobs (optional optimization)
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          cache: 'pnpm'

      - name: Create .env files
        run: |
          cp ./backend/.env.example ./backend/.env
          cp ./frontend/.env.example ./frontend/.env

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Save node_modules so other jobs can reuse
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('pnpm-lock.yaml') }}

  # Runs linting
  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          cache: 'pnpm'

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Run Biome
        run: pnpm biome check .

  # Runs all tests
  test:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          cache: 'pnpm'

      - name: Create .env files
        run: |
          cp ./backend/.env.example ./backend/.env
          cp ./frontend/.env.example ./frontend/.env

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm test

  # Will run a quick startup check to ensure the app starts without issues
  quick:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24

      - name: Create .env files
        run: |
          cp ./backend/.env.example ./backend/.env
          cp ./frontend/.env.example ./frontend/.env

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Start quick and wait for Vite ready
        run: |
          timeout 120s stdbuf -oL pnpm quick | while IFS= read -r line; do
            # Show all output for debugging
            echo "$line"
            # Remove ANSI escape codes
            clean_line=$(echo "$line" | sed -r "s/\x1B\[[0-9;]*[mK]//g")
            # Match "VITE <version> ready in <ms>" anywhere in the line
            if echo "$clean_line" | grep -E "VITE [^ ]+ ready in [0-9]+ ms"; then
              echo "Vite server is ready!"
              pkill -P $$ pnpm
              break
            fi
          done
